snippet $
	$('${1}')${2}
snippet (f
	(function(${1}) {
		${3:/* code */}
	}(${2}));
snippet --
	/*------------------------------------------------------------------------------
	 ${1}
	------------------------------------------------------------------------------*/
snippet /**
	/**
	 * ${1}
	 */
snippet /*
	/*
	${1}
	*/
snippet :f
	${1:method_name}: function(${2:attribute}) {
		${4}
	}${3:,}
snippet ==
	/*==============================================================================
	 ${1}
	==============================================================================*/
snippet @par
	@param {${1:type}} ${2:name} ${3:description}
snippet @ret
	@return {${1:type}} ${2:description}
snippet add
	add('${1:selector}')${2}
snippet addcls
	addClass('${1:class name}')${2}
snippet after
	after('${1:HTML}')${2}
snippet ajax
	$.ajax({
		url: "${1:/url}",
		type: "${2:POST}",
		dataType: "${3:xml/html/script/json}",
		data: $.param( $("${4:element or selector}") ),

		complete: function() {
			${5://called when complete}
		},

		success: function() {
			${6://called when successful}
		},

		error: function() {
			${7://called when there is an error}
		},
	});
snippet ajaxerror
	ajaxError(function(${1:request, settings}) {
		${2://stuff to do when an AJAX call returns an error};
	});
	${3}
snippet ajaxget
	$.get('${1:/path/to/file.xml}', function(xml) {
		${2}
	});
snippet ajaxgetif
	$.getIfModified('${1:/path/to/file.cgi}', function(data){
		${2}
	});
snippet ajaxjson
	$.getJSON('${1:/path/to/file.cgi}', {${2:/*params*/}}, function(json) {
		${3}
	});
snippet ajaxpost
	$.post('${1:/path/to/file.cgi}', {${2:/*params*/}}, function() {
	    ${3://stuff to do after event occurs}
	});
snippet ajaxscr
	$.getScript('${1:/path/to/script.js}');${2}
snippet ajaxscrf
	$.getScript('${1:/path/to/script.js}', function() {
		${2}
	});
snippet ajaxsend
	ajaxSend(function(${1:request, settings}) {
		${2://stuff to do when an AJAX call returns an error}
	});
	${3}
snippet ajaxsetup
	$.ajaxSetup({
		url: "${1:/url}",
		type: "${2:POST}",
		dataType: "${3:xml/html/script/json}",
		data: $.param( $("${4:element or selector}") ),

		complete: function() {
			${5://called when complete}
		},

		success: function() {
			${6://called when successful}
		},

		error: function() {
			${7://called when there is an error}
		},
	});
snippet ajaxstart
	$.ajaxStart(function() {
		${1}
	});
snippet ajaxstop
	$.ajaxStop(function() {
		${1}
	});
snippet ajaxsuccess
	$.ajaxSuccess(function() {
		${1}
	});
snippet anim
	animate({${1:param1: value1, param2: value2}}, ${2:speed})${3}
snippet append
	append(${1:'HTML'})${2}
snippet appendto
	appendTo(${1:'selector'})${2}
snippet attr
	attr('${1:attribute}'${2:, }${3:'value'})${4}
snippet attrm
	attr({'${1:attr1}': '${2:value1}', '${3:attr2}': '${4:value2}'})${5}
snippet before
	before(${1:'HTML'})${2}
snippet bind
	bind('${1:eventname}', function(${2:event}) {
		${3}
	});
snippet blur
	blur(function() {
		${1}
	});
snippet case
	case '${1:case}':
		${2:// code}
		break;
	${3}
snippet change
	change(function() {
		${1}
	});
snippet children
	children('${1:selector}')${3}
snippet cl
	console.log(${1});
snippet click
	click(function() {
		${1}
	});
snippet clone
	clone()
snippet contains
	contains('${1:text to find}')${2}
snippet css
	css('${1:attribute}', '${2:value}')${3}
snippet cssm
	css({${1:attribute1}: '${2:value1}', ${3:attribute2}: '${4:value2}'})${5}
snippet dblclick
	dblclick(function() {
		${1}
	});
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
snippet each
	each(function(index) {
		${1:$(this)}
	});
snippet end
	end()
snippet error
	error(function() {
		${2}
	});
snippet f
	function(${1}) {
		${3}
	}${2:;}
snippet fadein
	fadeIn(${1:'fast'})${2}
snippet fadeinf
	fadeIn(${1:'fast'}, function() {
		${2}
	});
snippet fadeout
	fadeOut(${1:'fast'})${2}
snippet fadeoutf
	fadeOut(${1:'fast'}, function() {
		${2}
	});
snippet fadeto
	fadeTo(${1:'fast'}, ${2:0.5})${3}
snippet fadetof
	fadeTo(${1:'fast'}, ${2:0.5}, function() {
		${3}
	});
snippet filter
	filter('${1:selector}')${2}
snippet find
	find('${1:selector}')${2}
snippet focus
	focus(function() {
		${1}
	});
snippet for
	for (var ${2:i} = 0; $2 < ${1:Things}.length; $2${3: += 1}) {
		${4:$1[$2]}
	};
snippet fori
	for (var ${1:prop} in ${2:Things}) {
		${3:$2[$1]}
	};
snippet forr
	for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2${3: -= 1}) {
		${4:$1[$2]}
	};
snippet fun
	function ${1:function_name} (${2:argument}) {
		${3:// body...}
	}
snippet get
	get(${1:index})${2}
snippet getid
	getElementById('${1}')${2}
snippet gettag
	getElementsByTagName('${1}')${2}
snippet has
	hasOwnProperty(${1})
snippet height
	height(${1})${2}
snippet hide
	hide(${1:'fast'})${2}
snippet hidef
	hide(${1:'fast'}, function() {
		${2}
	});
snippet hover
	hover(
		function() {
			${1}
		},
		function() {

		}
	);
snippet html
	html(${1:'html'})${2}
snippet if
	if (${1:true}) {
		${2}
	}
snippet ife
	if (${1:true}) {
		${2}
	} else {
		${3}
	}
snippet insaft
	insertAfter('${1:selector}')${2}
snippet insbef
	insertBefore('${1:selector}')${2}
snippet is
	is('${1:selector}')${2}
snippet jsonp
	JSON.parse(${1:jstr});
snippet jsons
	JSON.stringify(${1:object});
snippet load
	load('${1:/path/to/file.cgi}')
snippet loadf
	load('${1:/path/to/file.cgi}', function(responseText, textStatus, xhr) {
		${2}
	});
snippet loadfp
	load('${1:/path/to/file.cgi}', {${2:/*params*/}}, function(responseText, textStatus, xhr) {
		${2}
	});
snippet loadif
	loadIfModified('${1:/path/to/file.cgi}')
snippet loadp
	load('${1:/path/to/file.cgi}', {${2:/*params*/}})
snippet loadpf
	load('${1:/path/to/file.cgi}', {${2:/*params*/}}, function(responseText, textStatus, xhr) {
		${2}
	});
snippet log
	console.log(${1});
snippet mdown
	mousedown(function() {
		${1}
	});
snippet mmove
	mousemove(function() {
		${1}
	});
snippet mout
	mouseout(function() {
		${1}
	});
snippet mover
	mouseover(function() {
		${1}
	});
snippet mup
	mouseup(function() {
		${1}
	});
snippet next
	next('${1:selector}')${2}
snippet not
	not('${1:selector}')${2}
snippet once
	once('${1:eventname}', function() {
		${2}
	});
snippet one
	one('${1:eventname}', function() {
		${2}
	});
snippet parent
	parent(${1:[selector]})${2}
snippet parents
	parents(${1:[selector]})${2}
snippet prepend
	prepend(${1:'HTML'})${2}
snippet prependto
	prependTo(${1:'selector'})${2}
snippet prev
	prev(${1:[selector]'})${2}
snippet proto
	${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}) {
		${4:// body...}
	};
snippet ready
	$(document).ready(function() {
		${1}
	});
snippet remove
	remove()
snippet removeatt
	removeAttr('${1}')${2}
snippet removeattr
	removeAttr('${1}')${2}
snippet removeclass
	removeClass('${1}')${2}
snippet removecls
	removeClass('${1}')${2}
snippet reset
	reset(function() {
		${1}
	});
snippet resize
	resize(function() {
		${1}
	});
snippet ret
	return ${1:result}
snippet scroll
	scroll(function() {
		${1}
	});
snippet sdf
	var ${1:function_name} = function (${2:argument}) {
		${3:// initial code ...}

		$1 = function ($2) {
			${4:// main code}
		};
	}
snippet sdown
	slideDown(${1:'fast'})${2}
snippet sdownf
	slideDown(${1:'fast'}, function() {
		${2}
	});
snippet select
	select(function() {
		${1}
	});
snippet show
	show(${1:'fast'})${2}
snippet showf
	show(${1:'fast'}, function() {
		${2}
	});
snippet sibl
	siblings('${1:selector}')${2}
snippet sing
	function ${1:Singleton} (${2:argument}) {
		// the cached instance
		var instance;

		// rewrite the constructor
		$1 = function $1($2) {
			return instance;
		};
		
		// carry over the prototype properties
		$1.prototype = this;

		// the instance
		instance = new $1();

		// reset the constructor pointer
		instance.constructor = $1;

		${3:// code ...}

		return instance;
	}
snippet size
	size()
snippet stoggle
	slideToggle(${1:'fast'})${2}
snippet stogglef
	slideToggle(${1:'fast'}, function() {
		${2}
	});
snippet submit
	submit(function() {
		${1}
	});
snippet sup
	slideUp(${1:'fast'})${2}
snippet supf
	slideUp(${1:'fast'}, function() {
		${2}
	});
snippet switch
	switch(${1:expression}) {
		case '${3:case}':
			${4:// code}
			break;
		${5}
		default:
			${2:// code}
	}
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
snippet text
	text(${1:'text'})${2}
snippet this
	$(this)
snippet timeout
	setTimeout(function() {${3}}${2}, ${1:10});
snippet togclass
	toggleClass('${1:classname}')${2}
snippet togcls
	toggleClass('${1:classname}')${2}
snippet toggle
	toggle(${1:'fast'})${2}
snippet togglef
	toggle(${1:'fast'}, function() {
		${2}
	});
snippet trig
	trigger('${1:eventname}')${2}
snippet trim
	$.trim('${1:string}')${2}
snippet try
	try {
		${1:/* code */}
	} catch(${2:e}) {
		${3:/* handle error */}
	}
snippet unbind
	unbind('${1:eventname}')${2}
snippet val
	val(${1:[text]})${2}
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
snippet width
	width(${1})${2}
snippet wrap
	wrap(${1:'<div></div>'})${2}
