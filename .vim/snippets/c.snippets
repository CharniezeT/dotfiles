snippet .
	[${1}]${2}
snippet cl
	class ${1:`Filename('$1_t', 'name')`} {
		public:
			$1 (${2:arguments});
			virtual ~$1 ();
		private:
			${3:/* data */}
	};
snippet def
	#define 
snippet Def
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif${3}
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
snippet else
	else {
		${1}
	}
snippet el
	else {
		${1}
	}
snippet for
	for (${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
		${4:/* code */}
	}
snippet forr
	for (${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++}) {
		${5:/* code */}
	}
snippet fpr
	fprintf(${1:stderr}, "${2:%s}\n"${3});${4}
snippet fun
	${1:void} ${2:function_name}(${3})
	{
		${4:/* code */}
	}
snippet fund
	${1:void} ${2:function_name}(${3});${4}
snippet gpl
	/*
	 * This program is free software; you can redistribute it and/or modify
	 * it under the terms of the GNU General Public License as published by
	 * the Free Software Foundation; either version 2 of the License, or
	 * (at your option) any later version.
	 *
	 * This program is distributed in the hope that it will be useful,
	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	 * GNU General Public License for more details.
	 *
	 * You should have received a copy of the GNU General Public License
	 * along with this program; if not, write to the Free Software
	 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
	 *
	 * Copyright (C) ${1:Author}, `strftime("%Y")`
	 */
snippet if
	if (${1:/* condition */}) {
		${2:/* code */}
	}
snippet #if
	#if ${1:FOO}
		${2}
	#endif
snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }
	#endif
snippet inc
	#include <${1:stdio}.h>${2}
snippet Inc
	#include "${1:`Filename("$1.h")`}"${2}
snippet main
	int main(int argc, const char *argv[])
	{
		${1}
		return 0;
	}
snippet mainn
	int main(void)
	{
		${1}
		return 0;
	}
snippet map
	std::map<${1:key}, ${2:value}> map${3};
snippet ns
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* $1 */
snippet once
	#ifndef ${1:`toupper(Filename('$1_H', 'UNTITLED_H'))`}
	#define $1

	${2}

	#endif /* end of include guard: $1 */
snippet pr
	printf("${1:%s}\n"${2});${3}
snippet readfile
	std::vector<char> v;
	if (FILE *${2:fp} = fopen(${1:"filename"}, "r")) {
		char buf[1024];
		while (size_t len = fread(buf, 1, sizeof(buf), $2))
			v.insert(v.end(), buf, buf + len);
		fclose($2);
	}${3}
snippet st
	struct ${1:`Filename('$1_t', 'name')`} {
		${2:/* data */}
	}${3: /* optional variable list */};${4}
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
snippet td
	typedef ${1:int} ${2:MyCustomType};${3}
snippet tde
	typedef enum {
		${1:/* data */}
	} ${2:foo};
snippet tds
	typedef struct ${2:_$1 }{
		${3:/* data */}
	} ${1:`Filename('$1_t', 'name')`};
snippet vector
	std::vector<${1:char}> v${2};
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
