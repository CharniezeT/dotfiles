snippet #!
	#!/usr/bin/env python

snippet .
	self.
snippet _
	__${1:init}__${2}
snippet "
	"""
	${1:doc}
	"""
snippet cascii
	# -*- coding: ascii -*-
snippet cl
	class ${1:ClassName}(${2:object}):
		"""${3:docstring for $1}"""
		def __init__(self, ${4:arg}):
			${5:super($1, self).__init__()}
			self.$4 = $4
			${6}
snippet class
	class ${1:``Snippet_PythonClassNameFromFilename()``}(${2:data}):
		${3:pass}
snippet clatin1
	# -*- coding: latin-1 -*-
snippet cutf8
	# -*- coding: utf-8 -*-
snippet def
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		"""${3:docstring for $1}"""
		${4:pass}
snippet deff
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		${3}
snippet defs
	def ${1:mname}(self, ${2:arg}):
		${3:pass}
snippet docs
	'''
	File: ${1:`Filename('$1.py', 'foo.py')`}
	Author: ${2:`g:snips_author`}
	Description: ${3}
	'''
snippet dowh
	while True:
		${1:# code...}
		if ${2:condition}:
			break
snippet ei
	elif ${1:condition}:
		${2:code...}
snippet el
	else:
		${1:code...}
snippet for
	for ${1:item} in ${2:items}
		${3:pass}
snippet from
	from ${1:package} import ${2:module}
snippet get
	def get_${1:name}(self):
		return self._$1
snippet gpl
	# ${1:Name}
	# Copyright (C) `strftime("%Y")` ${2:Author}
	#
	# This program is free software: you can redistribute it and/or modify
	# it under the terms of the GNU General Public License as published by
	# the Free Software Foundation, either version 3 of the License, or
	# (at your option) any later version.
	#
	# This program is distributed in the hope that it will be useful,
	# but WITHOUT ANY WARRANTY; without even the implied warranty of
	# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	# GNU General Public License for more details.
	#
	# You should have received a copy of the GNU General Public License
	# along with this program.  If not, see <http://www.gnu.org/licenses/>.
	
	${3:#code}
snippet if
	if ${1:condition}:
		${2:code...}
snippet ifmain
	if __name__ == '__main__':
		${1:main()}
snippet imp
	import ${1:module}
snippet init
	def __init__(self, ${1:args}):
		${2}
snippet ipdb
	import ipdb; ipdb.set_trace()
snippet ld
	${1:var} = lambda ${2:vars} : ${3:action}
snippet main
	if __name__ == '__main__':
		${1}
snippet pdb
	import pdb; pdb.set_trace()
snippet pdbpp
	import pdbpp; pdbpp.set_trace()
snippet property
	def ${1:foo}():
		doc = "${2:The $1 property.}"
		def fget(self):
			${3:return self._$1}
		def fset(self, value):
			${4:self._$1 = value}
snippet set
	def set_${1:name}(self, ${2:value}):
		self._$1 = $2
snippet try
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
snippet trye
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}
snippet tryf
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	finally:
		${5:pass}
snippet tryef
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}
	finally:
		${6:pass}
snippet wh
	while ${1:condition}:
		${2:# code...}
snippet with
	with ${1:expr} as ${2:var}:
		${3:# code...}
