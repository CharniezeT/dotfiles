snippet #!
	#!/usr/bin/php

snippet /* /*
	/*
	 * ${1}
	 */
snippet /** /**
	/**
	 * ${1}
	 */
snippet /**# /**#
	/**#@+
	 * ${1}
	 */
	${2}
	/**#@-*/
snippet /**#@+ /**#@+
	/**#@+
	 * ${1}
	 */
	${2}
	/**#@-*/
snippet {
	{
		${1}
	}
snippet "
	"${1}"
snippet '
	'${1}'
snippet ?
	(${1:condition} ? ${2:true} : ${3:false})
snippet $_C
	$_COOKIE['${1:variable}']${2}
snippet $_E
	$_ENV['${1:variable}']${2}
snippet $_F
	$_FILES['${1:variable}']${2}
snippet $_G
	$_GET['${1:variable}']${2}
snippet $_P
	$_POST['${1:variable}']${2}
snippet $_R
	$_REQUEST['${1:variable}']${2}
snippet $_S
	$_SERVER['${1:variable}']${2}
snippet $_SS
	$_SESSION['${1:variable}']${2}
snippet $GLOB
	$GLOBALS['${1:variable}']${2}
snippet <?
	<?php

	${1}
snippet <?=
	<?php echo ${1} ?>
snippet <?pi
	<?php phpinfo() ?>
snippet <<<
	<<<${1:HEREDOC}
	${2}
	$1;${3}
snippet abs
	abs(${1:number})${2}
snippet abstract
	/**
	 * ${2}
	 *
	 * @author `g:snips_author`
	 */
	abstract class ${1:`snipMateCustom#AutoClassName()`}
	{

		${3}

	}
snippet abstracte
	/**
	 * ${3}
	 *
	 * @author `g:snips_author`
	 */
	abstract class ${1:`snipMateCustom#AutoClassName()`} extends ${2}
	{

		${4}

	}
snippet addcslashes
	addcslashes(${1:string}, ${2:charlist})${3}
snippet addslashes
	addslashes(${1:string})${2}
snippet arr
	array(${1})${2}
snippet array
	array(${1})${2}
snippet array_change_key_case
	array_change_key_case(${1:input}${2:, }${3:CASE_LOWER})${4}
snippet array_chunk
	array_chunk(${1:input}, ${2:size}${3:, }${4:[preserve_keys=false]})${5}
snippet array_combine
	array_combine(${1:keys}, ${2:values})${3}
snippet array_count_values
	array_count_values(${1:input})${2}
snippet array_diff
	array_diff(${1:array1}, ${2:array2...})${3}
snippet array_diff_assoc
	array_diff_assoc(${1:array1}, ${2:array2...})${3}
snippet array_diff_key
	array_diff_key(${1:array1}, ${2:array2...})${3}
snippet array_diff_uassoc
	array_diff_uassoc(${1:array1}, ${2:array2...}, ${3:callback})${4}
snippet array_diff_ukey
	array_diff_ukey(${1:array1}, ${2:array2...}, ${3:callback})${4}
snippet array_fill
	array_fill(${1:start_index}, ${2:num_elements}, ${3:value})${4}
snippet array_fill_keys
	array_fill_keys(${1:keys_array}, ${2:value})${3}
snippet array_filter
	array_filter(${1:input}${2:, }${3:[callback]})${4}
snippet array_flip
	array_flip(${1:input})${2}
snippet array_intersect
	array_intersect(${1:array1}, ${2:array2...})${3}
snippet array_intersect_assoc
	array_intersect_assoc(${1:array1}, ${2:array2...})${3}
snippet array_intersect_key
	array_intersect_key(${1:array1}, ${2:array2...})${3}
snippet array_intersect_uassoc
	array_intersect_uassoc(${1:array1}, ${2:array2...}, ${3:callback})${4}
snippet array_intersect_ukey
	array_intersect_ukey(${1:array1}, ${2:array2...}, ${3:callback})${4}
snippet array_key_exists
	array_key_exists(${1:key}, ${2:array})${3}
snippet array_keys
	array_keys(${1:array}${2:, }${3:[search_value]}${4:, }${5:[strict_compare=false]})${6}
snippet array_map
	array_map(${1:callback}, ${2:array1...})${3}
snippet array_merge
	array_merge(${1:array1}, ${2:array2...})${3}
snippet array_merge_recursive
	array_merge_recursive(${1:array1}, ${2:array2...})${3}
snippet array_multisort
	array_multisort(${1:&array1}, ${2:&array2...})${3}
snippet array_pad
	array_pad(${1:array}, ${2:size}, ${3:value})${4}
snippet array_pop
	array_pop(${1:array})${2}
snippet array_product
	array_product(${1:array})${2}
snippet array_push
	array_push(${1:array}, ${2:var1...})${3}
snippet array_rand
	array_rand(${1:array}${2:, }${3:[count=1]})${4}
snippet array_reduce
	array_reduce(${1:array}, ${2:callback}${3:, }${4:[initial]})${5}
snippet array_replace
	array_replace(${1:array}, ${2:replacement_array1...})${3}
snippet array_replace_recursive
	array_replace_recursive(${1:array}, ${2:replacement_array1...})${3}
snippet array_reverse
	array_reverse(${1:array}${2:, }${3:[preserve_keys=false]})${4}
snippet array_search
	array_search(${1:needle}, ${2:haystack}${3:, }${4:[strict_compare=false]})${5}
snippet array_shift
	array_shift(${1:array})${2}
snippet array_slice
	array_slice(${1:array}, ${2:offset}${3:, }${4:[length]}${5:, }${6:[preserve_keys=false]})${7}
snippet array_splice
	array_splice(${1:array}, ${2:offset}${3:, }${4:[length]}${5:, }${6:[replacement]})${7}
snippet array_sum
	array_sum(${1:array})${2}
snippet array_udiff
	array_udiff(${1:array1}, ${2:array2...}, ${3:callback})${4}
snippet array_udiff_assoc
	array_udiff_assoc(${1:array1}, ${2:array2...}, ${3:callback})${4}
snippet array_udiff_uassoc
	array_udiff_uassoc(${1:array1}, ${2:array2...}, ${3:data_callback}, ${4:key_callback})${5}
snippet array_uintersect
	array_uintersect(${1:array1}, ${2:array2...}, ${3:callback})${4}
snippet array_uintersect_assoc
	array_uintersect_assoc(${1:array1}, ${2:array2...}, ${3:callback})${4}
snippet array_uintersect_uassoc
	array_uintersect_uassoc(${1:array1}, ${2:array2...}, ${3:data_callback}, ${4:key_callback})${5}
snippet array_unique
	array_unique(${1:array}${2:, }${3:[sort_flags=SORT_STRING]})${4}
snippet array_unshift
	array_unshift(${1:array}, ${2:var1...})${3}
snippet array_values
	array_values(${1:array})${2}
snippet array_walk
	array_walk(${1:array}, ${2:callback}${3:, }${4:[userdata]})${5}
snippet array_walk_recursive
	array_walk_recursive(${1:array}, ${2:callback}${3:, }${4:[userdata]})${5}
snippet arsort
	arsort(${1:&array}${2:, }${3:[flags=SORT_REGULAR]})${4}
snippet assert
	assert(${1:assertion})${2}
snippet assert_options ASSERT_ACTIVE		  Enable assert() evaluation
	assert_options(ASSERT_ACTIVE, ${1:true})${2}
snippet assert_options ASSERT_WARNING     Issue a PHP warning for each failed assertion
	assert_options(ASSERT_WARNING, ${1:true})${2}
snippet assert_options ASSERT_BAIL        Terminate execution on failed assertions
	assert_options(ASSERT_BAIL, ${1:false})${2}
snippet assert_options ASSERT_QUIET_EVAL  Disable error_reporting during assertion expression evaluation
	assert_options(ASSERT_QUIET_EVAL, ${1:false})${2}
snippet assert_options ASSERT_CALLBACK    Callback to call on failed assertions
	assert_options(ASSERT_CALLBACK, ${1:callback})${2}
snippet asort
	asort(${1:&array}${2:, }${3:[flags=SORT_REGULAR]})${4}
snippet backtrace
	debug_print_backtrace()
snippet base_convert
	base_convert(${1:number}, ${2:from_base}, ${3:to_base})${4}
snippet base64_decode
	base64_decode(${1:string}${2:, }${3:[strict=false]})${4}
snippet base64_encode
	base64_encode(${1:string})${2}
snippet basename
	basename(${1:path}${2:, }${3:[suffix_to_remove]})${4}
snippet bin2dec
	bindec(${1:string})${2}
snippet bin2hex
	bin2hex(${1:string})${2}
snippet bindec
	bindec(${1:string})${2}
snippet binhex
	bin2hex(${1:string})${2}
snippet bintodec
	bindec(${1:string})${2}
snippet bintohex
	bin2hex(${1:string})${2}
snippet break
		break;

	case ${1:value}:
		${2}
snippet call_user_func
	call_user_func(${1:callback}${2:, }${3:var1...})${4}
snippet call_user_func_array
	call_user_func_array(${1:callback}, ${2:array})${3}
snippet case
	case ${1:value}:
		${2}
		break;${3}
snippet ceil
	ceil(${1:number})${2}
snippet chdir
	chdir(${1:directory})${2}
snippet checkdate
	checkdate(${1:month}, ${2:day}, ${3:year})${4}
snippet checkdnsrr
	dns_check_record(${1:host}${2:, }${3:[type=MX]})${4}
snippet chgrp
	chgrp(${1:filename}, ${2:group})${3}
snippet chmod
	chmod(${1:filename}, ${2:0777})${3}
snippet chown
	chown(${1:filename}, ${2:user})${3}
snippet chr
	chr(${1:ascii_code})${2}
snippet class
	/**
	 * ${2}
	 *
	 * @author `g:snips_author`
	 */
	class ${1:`snipMateCustom#AutoClassName()`}
	{

		${3}

	}
snippet classe
	/**
	 * ${3}
	 *
	 * @author `g:snips_author`
	 */
	class ${1:`snipMateCustom#AutoClassName()`} extends ${2}
	{

		${4}

	}
snippet class_exists
	class_exists(${1:class_name}${2:, }${3:[autoload=true]})${4}
snippet class_implements
	class_implements(${1:class/object}${2:, }${3:[autoload=true]})${4}
snippet class_parents
	class_parents(${1:class/object}${2:, }${3:[autoload=true]})${4}
snippet clearstatcache
	clearstatcache(${1:[clear_realpath_cache=false]}${2:, }${3:[filename]})${4}
snippet closedir
	closedir(${1:handle})${2}
snippet cls
	<?php

	/**
	 * ${2}
	 *
	 * @author `g:snips_author`
	 */
	class ${1:`snipMateCustom#AutoClassName()`}
	{

		${3}

	}
snippet clse
	<?php

	/**
	 * ${3}
	 *
	 * @author `g:snips_author`
	 */
	class ${1:`snipMateCustom#AutoClassName()`} extends ${2}
	{

		${4}

	}
snippet common
	require_once $_SERVER['DOCUMENT_ROOT'] . '/../includes/common.php';
snippet compact
	compact(${1:var1.../array})${4}
snippet cons
	/**
	 * ${2}
	 */
	public function __construct(${1})
	{
		${3}
	}
snippet constant
	constant(${1:string})${2}
snippet cookie
	$_COOKIE['${1:variable}']${2}
snippet copy
	copy(${1:source}, ${2:dest})${3}
snippet count
	count(${1:var})${2}
snippet crc32
	crc32(${1:string})${2}
snippet ctype_alnum
	ctype_alnum(${1:string})${2}
snippet ctype_alpha
	ctype_alpha(${1:string})${2}
snippet ctype_cntrl
	ctype_cntrl(${1:string})${2}
snippet ctype_digit
	ctype_digit(${1:string})${2}
snippet ctype_graph
	ctype_graph(${1:string})${2}
snippet ctype_lower
	ctype_lower(${1:string})${2}
snippet ctype_print
	ctype_print(${1:string})${2}
snippet ctype_punct
	ctype_punct(${1:string})${2}
snippet ctype_space
	ctype_space(${1:string})${2}
snippet ctype_upper
	ctype_upper(${1:string})${2}
snippet ctype_xdigit
	ctype_xdigit(${1:string})${2}
snippet current
	current(${1:&array})${2}
snippet date Custom...
	date(${1:format}${2:, }${3:[timestamp=time()]})${4}
snippet date 2001-02-03                   YYYY-MM-DD
	date('${1:Y-m-d}'${2:, }${3:[timestamp=time()]})${4}
snippet date Saturday 3rd February 2001   DDDD Dth MMMM YYYY
	date('${1:l jS F Y}'${2:, }${3:[timestamp=time()]})${4}
snippet date 4:05am                       h:mmtt
	date('${1:g:ia}'${2:, }${3:[timestamp=time()]})${4}
snippet debug_backtrace
	debug_backtrace(${1:[provide_object=true]})${2}
snippet debug_print_backtrace
	debug_print_backtrace()
snippet dec2bin
	decbin(${1:number})${2}
snippet dec2hex
	dechex(${1:number})${2}
snippet dec2oct
	decoct(${1:number})${2}
snippet decbin
	decbin(${1:number})${2}
snippet dechex
	dechex(${1:number})${2}
snippet decoct
	decoct(${1:number})${2}
snippet dectobin
	decbin(${1:number})${2}
snippet dectohex
	dechex(${1:number})${2}
snippet dectooct
	decoct(${1:number})${2}
snippet def
	define('${1}', ${2})${3}
snippet def?
	defined('${1}')${2}
snippet define
	define('${1}', '${2}')${3}
snippet defined
	defined('${1}')${2}
snippet deftpl
	djmSmarty::defaultTemplate()
snippet delete
	unlink(${1:filename})${2}
snippet die
	die(${1:status})${2}
snippet dir
	dir(${1:path})${2}
snippet dirname
	dirname(${1:path})${2}
snippet disp
	$app->tpl->assign(compact('${1}'))
	         ->display(${2:djmSmarty::defaultTemplate()});
snippet dns_check_record
	dns_check_record(${1:host}${2:, }${3:[type=MX]})${4}
snippet dns_get_mx
	dns_get_mx(${1:hostname}, ${2:&hosts_array}${3:, }${4:[&weights_array]})${5}
snippet dns_get_record
	dns_get_record(${1:hostname}${2:, }${3:[type=DNS_ANY]}${4:, }${5:[&authns_array]}${6:, }${7:[&additional_array]})${8}
snippet do
	do {
		${2}
	} while (${1:/* condition */});
snippet dump
	var_dump(${1:var});exit;
snippet each
	each(${1:array})${2}
snippet ec
	echo ${1}
snippet echo
	echo ${1}
snippet elif
	elseif (${1:/* condition */}) {
		${2}
	}
snippet else
	else {
		${1}
	}
snippet elseif
	elseif (${1:/* condition */}) {
		${2}
	}
snippet empty
	empty(${1:var})${2}
snippet end
	end(${1:&array})${2}
snippet env
	$_ENV['${1:variable}']${2}
snippet error_log To PHP's system logger
	error_log(${1:message})${2}
snippet error_log By email
	error_log(${1:message}, 1, ${2:email}${3:, }${4:[extra_headers]})${5}
snippet error_log To file
	error_log(${1:message}, 3, ${2:filename})${3}
snippet error_log To SAPI logging handler
	error_log(${1:message}, 4)${2}
snippet error_reporting Custom...
	error_reporting(${1:level})${2}
snippet error_reporting E_ALL
	error_reporting(E_ALL)
snippet error_reporting E_ALL | E_STRICT
	error_reporting(E_ALL | E_STRICT)
snippet error_reporting E_ALL ^ E_NOTICE
	error_reporting(E_ALL ^ E_NOTICE)
snippet escapeshellarg
	escapeshellarg(${1:arg})${2}
snippet escapeshellcmd
	escapeshellcmd(${1:command})${2}
snippet eval
	eval(${1:string})${2}
snippet exec
	exec(${1:command}${2:, }${3:[&output]}${4:, }${5:[&return_val]})${6}
snippet exit
	exit(${1:status})${2}
snippet exp
	exp(${1:number})${2}
snippet explode
	explode(${1:delimiter}, ${2:string}${3:, }${4:[limit]})${5}
snippet extract
	extract(${1:array}${2:, }${3:[type=EXTR_OVERWRITE]}${4:, }${5:[prefix]})${6}
snippet fclose
	fclose(${1:handle})${2}
snippet feof
	feof(${1:handle})${2}
snippet fflush
	fflush(${1:handle})${2}
snippet fgetc
	fgetc(${1:handle})${2}
snippet fgetcsv
	fgetcsv(${1:handle}${2:, }${3:[length]}${4:, }${5:[delimiter=,]}${6:, }${7:[enclosure]}${8:, }${9:[escape=\]})${10}
snippet fgets
	fgets(${1:handle}${2:, }${3:[length]})${4}
snippet file
	file(${1:filename})${2}
snippet file_exists
	file_exists(${1:filename})${2}
snippet file_get_contents
	file_get_contents(${1:filename})${2}
snippet	file_put_contents
	file_put_contents(${1:filename}, ${2:data})${3}
snippet fileatime
	fileatime(${1:filename})${2}
snippet filectime
	filectime(${1:filename})${2}
snippet filegroup
	filegroup(${1:filename})${2}
snippet filemtime
	filemtime(${1:filename})${2}
snippet fileowner
	fileowner(${1:filename})${2}
snippet fileperms
	fileperms(${1:filename})${2}
snippet files
	$_FILES['${1:variable}']${2}
snippet filesize
	filesize(${1:filename})${2}
snippet filetype
	filetype(${1:filename})${2}
snippet floor
	floor(${1:number})${2}
snippet flush
	flush()
snippet fmod
	fmod(${1:x}, ${2:y})${3}
snippet fopen
	fopen(${1:filename}, ${2:mode})${3}
snippet for
	for (${1:$i} = ${2:0}; $1 < ${3:count}; ${3:$1++}) {
		${4}
	}
snippet foreach
	foreach (${1:$var} as ${2:$item}) {
		${3}
	}
snippet forward_static_call
	forward_static_call(${1:callback}${2:, }${3:var1...})${4}
snippet forward_static_call_array
	forward_static_call_array(${1:callback}, ${2:array})${3}
snippet fpassthru
	fpassthru(${1:handle})${2}
snippet fputcsv
	fputcsv(${1:handle}, ${2:array}${3:, }${4:[delimiter=,]}${5:, }${6:[enclosure=]})${7}
snippet fread
	fread(${1:handle}, ${2:length})${3}
snippet fseek
	fseek(${1:handle}, ${2:offset}${3:, }${4:[whence=SEEK_SET]})${5}
snippet fsockopen
	fsockopen(${1:hostname}${2:, }${3:[port]}${4:, }${5:[&errno]}${6:, }${7:[&errstr]}${8:, }${9:[timeout]})${10}
snippet fstat
	fstat(${1:handle})${2}
snippet ftell
	ftell(${1:handle})${2}
snippet ftruncate
	ftruncate(${1:handle}, ${2:size})${3}
snippet fun
	/**
	 * ${3}
	 *
	 * @return ${4:void}
	 */
	public function ${1:functionName}(${2})
	{
		${5}
	}
snippet func_get_arg
	func_get_arg(${1:0})${2}
snippet func_get_args
	func_get_args()
snippet func_num_args
	func_num_args()
snippet function_exists
	function_exists(${1:function})${2}
snippet fwrite
	fwrite(${1:handle}, ${2:string}${3:, }${4:[length]})${5}
snippet fputs
	fwrite(${1:handle}, ${2:string}${3:, }${4:[length]})${5}
snippet gapp
	global $app;
snippet get
	$_GET['${1:variable}']${2}
snippet get_called_class
	get_called_class()
snippet get_class
	get_class(${1:[object]})${2}
snippet get_class_methods
	get_class_methods(${1:class/object})${2}
snippet get_class_vars
	get_class_vars(${1:class})${2}
snippet get_declared_classes
	get_declared_classes()
snippet get_declared_interfaces
	get_declared_interfaces()
snippet get_defined_functions
	get_defined_functions()
snippet get_defined_vars
	get_defined_vars()
snippet get_headers
	get_headers(${1:url}${2:, }${3:[assoc=false]})${4}
snippet get_meta_tags
	get_meta_tags(${1:filename})${2}
snippet get_object_vars
	get_object_vars(${1:object})${2}
snippet get_parent_class
	get_parent_class(${1:class/object})${2}
snippet getcwd
	getcwd()
snippet gethostbyaddr
	gethostbyaddr(${1:ipaddress}}${2}
snippet gethostbyname
	gethostbyname(${1:hostname})${2}
snippet gethostbynamel
	gethostbynamel(${1:hostname})${2}
snippet gethostname
	gethostname()
snippet getimagesize
	getimagesize(${1:filename})${2}
snippet getips
	gethostbynamel(${1:hostname})${2}
snippet getmxrr
	dns_get_mx(${1:hostname}, ${2:&hosts_array}${3:, }${4:[&weights_array]})${5}
snippet getprotobyname
	getprotobyname(${1:name})${2}
snippet getprotobynumber
	getprotobynumber(${1:number})${2}
snippet getrandmax
	getrandmax()
snippet getservbyname
	getservbyname(${1:service}, ${2:'tcp'})${3}
snippet getservbyport
	getservbyport(${1:port}, ${2:'tcp'})${3}
snippet gfun
	/**
	 * ${3}
	 *
	 * @return ${4:void}
	 * @author `g:snips_author`
	 */
	function ${1:function_name}(${2})
	{
		${5}
	}
snippet glob
	glob(${1:pattern}${2:, }${3:[flags]})${4}
snippet global
	global ${1:var_name};${2}
snippet globals
	$GLOBALS['${1:variable}']${2}
snippet gmdate Custom...
	gmdate(${1:format}${2:, }${3:[timestamp=time()]})${4}
snippet gmdate 2001-02-03                   YYYY-MM-DD
	gmdate('${1:Y-m-d}'${2:, }${3:[timestamp=time()]})${4}
snippet gmdate Saturday 3rd February 2001   DDDD Dth MMMM YYYY
	gmdate('${1:l jS F Y}'${2:, }${3:[timestamp=time()]})${4}
snippet gmdate 4:05am                       h:mmtt
	gmdate('${1:g:ia}'${2:, }${3:[timestamp=time()]})${4}
snippet gmmktime
	gmmktime(${1:[hour]}${2:, }${3:[minute]}${4:, }${5:[second]}${6:, }${7:[month]}${8:, }${9:[day]}${10:, }${11:[year]})${12}
snippet gmstrftime
	gmstrftime(${1:format}${2:, }${3:[timestamp=time()]})${4}
snippet header
	header(${1:header}${2:, }${3:[replace=true]}${4:, }${5:[code]})${6}
snippet header_remove
	header_remove(${1:[key]})${2}
snippet headers_list
	headers_list()
snippet headers_sent
	headers_sent(${1:[&file]}${2:, }${3:[&line]})${4}
snippet hex2dec
	hexdec(${1:string})${2}
snippet hexdec
	hexdec(${1:string})${2}
snippet hextodec
	hexdec(${1:string})${2}
snippet highlight_file
	highlight_file(${1:filename}${2:, }${3:[return=false]})${4}
snippet highlight_string
	highlight_string(${1:string}${2:, }${3:[return=false]})${4}
snippet html_entity_decode
	html_entity_decode(${1:string}${2:, }${3:ENT_COMPAT}${4:, }${5:'UTF-8'})${6}
snippet hostnametoip
	gethostbyname(${1:hostname})${2}
snippet html
	<?php
	header('Content-Type: text/html; charset=utf-8');
	header('Content-Language: en-GB');
	?>
	`snipMateCustom#HTML()`
snippet htmlentities
	htmlentities(${1:string}${2:, }${3:ENT_COMPAT}${4:, }${5:'UTF-8'}${6:, }${7:[double_encode]})${8}
snippet htmlspecialchars
	htmlspecialchars(${1:string}${2:, }${3:ENT_COMPAT}${4:, }${5:'UTF-8'}${6:, }${7:[double_encode]})${8}
snippet htmlspecialchars_decode
	htmlspecialchars_decode(${1:string}${2:, }${3:[quote_style=ENT_COMPAT]})${4}
snippet http_build_query
	http_build_query(${1:array}
snippet iconv
	iconv(${1:in_charset}, ${2:out_charset}, ${3:string})${4}
snippet idate Custom...
	idate(${1:format}${2:, }${3:[timestamp]})${4}
snippet idate b - Swatch Beat/Internet Time
	idate('b'${1:, }${2:[timestamp]})${3}
snippet idate d - Day of the month
	idate('d'${1:, }${2:[timestamp]})${3}
snippet idate h - Hour (12 hour format)
	idate('h'${1:, }${2:[timestamp]})${3}
snippet idate H - Hour (24 hour format)
	idate('H'${1:, }${2:[timestamp]})${3}
snippet idate i - Minutes
	idate('i'${1:, }${2:[timestamp]})${3}
snippet idate I - 1 if DST is activated, 0 otherwise
	idate('I'${1:, }${2:[timestamp]})${3}
snippet idate L - 1 for leap year, 0 otherwise
	idate('L'${1:, }${2:[timestamp]})${3}
snippet idate m - Month number
	idate('m'${1:, }${2:[timestamp]})${3}
snippet idate s - Seconds
	idate('s'${1:, }${2:[timestamp]})${3}
snippet idate t - Days in current month
	idate('t'${1:, }${2:[timestamp]})${3}
snippet idate U - Seconds since the Unix Epoch
	idate('U'${1:, }${2:[timestamp]})${3}
snippet idate w - Day of the week (0 on Sunday)
	idate('w'${1:, }${2:[timestamp]})${3}
snippet idate W - ISO-8601 week number of year, weeks starting on Monday
	idate('W'${1:, }${2:[timestamp]})${3}
snippet idate y - Year (1 or 2 digits)
	idate('y'${1:, }${2:[timestamp]})${3}
snippet idate Y - Year (4 digits)
	idate('Y'${1:, }${2:[timestamp]})${3}
snippet idate z - Day of the year
	idate('z'${1:, }${2:[timestamp]})${3}
snippet idate Z - Timezone offset in seconds
	idate('Z'${1:, }${2:[timestamp]})${3}
snippet if
	if (${1:/* condition */}) {
		${2}
	}${3}
snippet ife
	if (${1:/* condition */}) {
		${2}
	} else {
		${3}
	}${4}
snippet ignore_user_abort
	ignore_user_abort(${1:true})${2}
snippet image_type_to_extension
	image_type_to_extension(${1:imagetype}${2:, }${3:[includedot=true]})${4}
snippet image_type_to_mime_type
	image_type_to_mime_type(${1:imagetype})${2}
snippet imagecopy
	imagecopy(${1:dst_image}, ${2:src_image}, ${3:dst_x}, ${4:dst_y}, ${5:src_x}, ${6:src_y}, ${7:width}, ${8:height})${9}
snippet imagecopyresampled
	imagecopyresampled(${1:dst_image}, ${2:src_image}, ${3:dst_x}, ${4:dst_y}, ${5:src_x}, ${6:src_y}, ${7:dst_w}, ${8:dst_h}, ${9:src_w}, ${10:src_h})${11}
snippet imagecreate
	imagecreate(${1:width}, ${2:height})${3}
snippet imagecreatefromgif
	imagecreatefromgif(${1:filename})${2}
snippet imagecreatefromjpeg
	imagecreatefromjpeg(${1:filename})${2}
snippet imagecreatefrompng
	imagecreatefrompng(${1:filename})${2}
snippet imagecreatetruecolor
	imagecreatetruecolor(${1:width}, ${2:height})${3}
snippet imagegif
	imagegif(${1:image}${2:, }${3:[filename=null]})${4}
snippet imagejpeg
	imagejpeg(${1:image}${2:, }${3:[filename=null]}${4:, }${5:[quality=75]})${6}
snippet imagepng
	imagepng(${1:image}${2:, }${3:[filename=null]}${4:, }${5:[quality=75]}${6:, }${7:[filters]})${8}
snippet implode
	implode(${1:glue}, ${2:array})${3}
snippet in_array
	in_array(${1:needle}, ${2:haystack}${3:, }${4:strict_compare=false})${5}
snippet inc
	include '${1:file}';${2}
snippet inc1
	include_once '${1:file}';${2}
snippet inet_ntop
	inet_ntop(${1:packed_ip})${2}
snippet inet_pton
	inet_pton(${1:ip_address})${2}
snippet ini_get
	ini_get(${1:var_name})${2}
snippet ini_set
	ini_set(${1:var_name}, ${2:value})${3}
snippet interface
	/**
	 * ${2}
	 *
	 * @author `g:snips_author`
	 */
	interface ${1:`snipMateCustom#AutoClassName()`}
	{

		${3}

	}
snippet interface_exists
	interface_exists(${1:interface}${2:, }${3:[autoload=true]})${4}
snippet intval
	intval(${1:var}${2:, }${3:[base=10]})${4}
snippet ip2long
	ip2long(${1:ip_address})${2}
snippet iptohostname
	gethostbyaddr(${1:ipaddress}}${2}
snippet is_a
	is_a(${1:object}, ${2:class})${3}
snippet is_array
	is_array(${1:var})${2}
snippet is_bool
	is_bool(${1:var})${2}
snippet is_callable
	is_callable(${1:var}${2:, }${3:[syntax_only=false])${4}
snippet is_dir
	is_dir(${1:filename})${2}
snippet is_executable
	is_executable(${1:filename})${2}
snippet is_file
	is_file(${1:filename})${2}
snippet is_float
	is_float(${1:var})${2}
snippet is_finite
	is_finite(${1:number})${2}
snippet is_infinite
	is_infinite(${1:number})${2}
snippet is_int
	is_int(${1:var})${2}
snippet is_link
	is_link(${1:filename})${2}
snippet is_nan
	is_nan(${1:number})${2}
snippet is_null
	is_null(${1:var})${2}
snippet is_numeric
	is_numeric(${1:var})${2}
snippet is_object
	is_object(${1:var})${2}
snippet is_readable
	is_readable(${1:filename})${2}
snippet is_resource
	is_resource(${1:var})${2}
snippet is_scalar
	is_scalar(${1:var})${2}
snippet is_string
	is_string(${1:var})${2}
snippet is_subclass_of
	is_subclass_of(${1:class/object}, ${2:parent_class})${3}
snippet is_uploaded_file
	is_uploaded_file(${1:filename})${2}
snippet is_writable
	is_writable(${1:filename})${2}
snippet is_writeable
	is_writable(${1:filename})${2}
snippet isset
	isset(${1:var})${2}
snippet iterator_count
	iterator_count(${1:iterator})${2}
snippet iterator_to_array
	iterator_to_array(${1:iterator})${2}
snippet json_decode
	json_decode(${1:string}${2:, }${3:[associative=false]}${4:, }${5:[depth=512]})${6}
snippet json_encode
	json_encode(${1:var})${2}
snippet key
	key(${1:&array})${2}
snippet krsort
	krsort(${1:&array}${2:, }${3:[flags=SORT_REGULAR]})${4}
snippet ksort
	ksort(${1:&array}${2:, }${3:[flags=SORT_REGULAR]})${4}
snippet lcase
	strtolower(${1:string})${2}
snippet list
	list(${1:var1...})${2}
snippet log
	error_log(var_export(${1}, true));${2}
snippet long2ip
	long2ip(${1:address})${2}
snippet lower
	strtolower(${1:string})${2}
snippet ltrim
	ltrim(${1:string}${2:, }${3:[char_list]})${4}
snippet max
	max(${1:var1.../array})${2}
snippet md5
	md5(${1:string})${2}
snippet md5_file
	md5_file(${1:filename})${2}
snippet memory_get_peak_usage
	memory_get_peak_usage(${1:[real_usage=false]})${2}
snippet memory_get_usage
	memory_get_usage(${1:[real_usage=false]})${2}
snippet method_exists
	method_exists(${1:class/object}, ${2:method})${3}
snippet mkdir
	mkdir(${1:path}${2:, }${3:[mode=0777]}${4:, }${5:[recursive=false]})${6}
snippet mktime
	mktime(${1:[hour]}${2:, }${3:[minute]}${4:, }${5:[second]}${6:, }${7:[month]}${8:, }${9:[day]}${10:, }${11:[year]}${12:, }${13:[is_dst=auto]})${14}
snippet microtime
	microtime(${1:[as_float=false]})${2}
snippet min
	min(${1:var1.../array})${2}
snippet move
	rename(${1:old_name}, ${2:new_name})${3}
snippet move_uploaded_file
	move_uploaded_file(${1:filename}, ${2:destination})${3}
snippet mt_rand
	mt_rand(${1:min}, ${2:max})${3}
snippet mysqli
	new MySQLi(${1:[host]}${2:, }${3:[username]}${4:, }${5:[password]}${6:, }${7:[dbname]}${8:, }${9:[port]}${10:, }${11:[socket]})${12}
snippet natcasesort
	natcasesort(${1:&array})${2}
snippet natsort
	natsort(${1:&array})${2}
snippet next
	next(${1:&array})${2}
snippet nl2br
	nl2br(${1:string})
snippet number_format
	number_format(${1:number}${2:, }${3:[decimals=0]})${4}
snippet ob_clean
	ob_clean()
snippet ob_end_clean
	ob_end_clean()
snippet ob_end_flush
	ob_end_flush()
snippet ob_flush
	ob_flush()
snippet ob_get_clean
	ob_get_clean()
snippet ob_get_contents
	ob_get_contents()
snippet ob_get_flush
	ob_get_flush()
snippet ob_get_length
	ob_get_length()
snippet ob_get_level
	ob_get_level()
snippet ob_get_status
	ob_get_status(${1:[full_status=false]})${2}
snippet ob_implicit_flush
	ob_implicit_flush(${1:[setting=true]})${2}
snippet ob_list_handlers
	ob_list_handlers()
snippet ob_start
	ob_start(${1:[callback]}${2:, }${3:[chunk_size=0]}${4:, }${5:[erase=true]})${6}
snippet oct2dec
	octdec(${1:string})${2}
snippet octdec
	octdec(${1:string})${2}
snippet octtodec
	octdec(${1:string})${2}
snippet opendir
	opendir(${1:path})${2}
snippet ord
	ord(${1:char})${2}
snippet pack
	pack(${1:format}, ${2:args...})${3}
snippet parse_str
	parse_str(${1:string}${2:, }${3:[&array]})${4}
snippet parse_url
	parse_url(${1:url}${2:, }${3:[component]})${4}
snippet passthru
	passthru(${1:command}${2:, }${3:[&return_val]})${4}
snippet pathinfo
	pathinfo(${1:path}${2:, }${3:[elements]})${4}
snippet pclose
	pclose(${1:handle})${2}
snippet pfun
	protected function _${1:functionName}(${2})
	{
		${3}
	}
snippet popen
	popen(${1:command}, ${2:mode})${3}
snippet post
	$_POST['${1:variable}']${2}
snippet pow
	pow(${1:base}, ${2:exp})${3}
snippet php
	<?php
	${1}
	?>
snippet phpinfo
	<?php phpinfo() ?>
snippet preg_filter
	preg_filter('${1:/}${3:pattern}$1${2:imsuUX}', ${4:replacement}, ${5:subject}${6:, }${7:[limit]}${8:, }${9:[&count]})${10}
snippet preg_grep
	preg_grep('${1:/}${3:pattern}$1${2:imsuUX}', ${4:input_array}${5:, }${6:[flags]})${7}
snippet preg_last_error
	preg_last_error()
snippet preg_match
	preg_match('${1:/}${3:pattern}$1${2:imsuUX}', ${4:subject}${5:, }${6:[&matches]}${7:, }${8:[flags]}${9:, }${10:[offset]})${11}
snippet preg_match_all
	preg_match_all('${1:/}${3:pattern}$1${2:imsuUX}', ${4:subject}, ${5:&matches}${6:, }${7:[flags]}${8:, }${9:[offset]})${10}
snippet preg_quote
	preg_quote(${1:string}${2:, }${3:[delimiter]})${4}
snippet preg_replace
	preg_replace('${1:/}${3:pattern}$1${2:imsuUX}', ${4:replacement}, ${5:subject}${6:, }${7:[limit]}${8:, }${9:[&count]})${10}
snippet preg_replace_callback
	preg_replace_callback('${1:/}${3:pattern}$1${2:imsuUX}', ${4:callback}, ${5:subject}${6:, }${7:[limit]}${8:, }${9:[&count]})${10}
snippet preg_split
	preg_split('${1:/}${3:pattern}$1${2:imsuUX}', ${4:subject}${5:, }${6:[limit]}${7:, }${8:[flags]})${9}
snippet prev
	prev(${1:&array})${2}
snippet print
	print ${1}
snippet print_r
	print_r(${1:var}${2:, }${3:[return=false]})${4}
snippet printf
	printf(${1:format}, ${2:args...})${3}
snippet property_exists
	property_exists(${1:class}, ${2:property})${3}
snippet psfun
	/**
	 * ${3}
	 *
	 * @return ${4:void}
	 */
	protected static function _${1:functionName}(${2})
	{
		${5}
	}
snippet pvar
	protected
		$_${1:varName};
snippet rand
	rand(${1:min}, ${2:max})${3}
snippet range
	range(${1:low}, ${2:high}${3:, }${4:[step=1]})${5}
snippet rawurldecode
	rawurldecode(${1:string})${2}
snippet rawurlencode
	rawurlencode(${1:string})${2}
snippet readdir
	readdir(${1:[handle]})${2}
snippet readfile
	readfile(${1:filename})${2}
snippet realpath
	realpath(${1:path})${2}
snippet rename
	rename(${1:old_name}, ${2:new_name})${3}
snippet req
	require '${1:file}';${2}
snippet req1
	require_once '${1:file}';${2}
snippet requ
	$_REQUEST['${1:variable}']${2}
snippet reset
	reset(${1:&array})${2}
snippet restore_error_handler
	restore_error_handler()
snippet restore_exception_handler
	restore_exception_handler()
snippet rewind
	rewind(${1:handle})${2}
snippet rewinddir
	rewinddir(${1:[handle]})${2}
snippet rmdir
	rmdir(${1:dirname})${2}
snippet rot13
	str_rot13(${1:string})${2}
snippet round
	round(${1:number}${2:, }${3:[precision=0]})${4}
snippet rsort
	rsort(${1:&array}${2:, }${3:[flags=SORT_REGULAR]})${4}
snippet rtrim
	rtrim(${1:string}${2:, }${3:[char_list]})${4}
snippet scandir
	scandir(${1:directory}${2:, }${3:[sort_desc=false]})${4}
snippet serialize
	serialize(${1:value})${2}
snippet server
	$_SERVER['${1:variable}']${2}
snippet sess
	$_SESSION['${1:variable}']${2}
snippet session
	$_SESSION['${1:variable}']${2}
snippet session_cache_expire
	session_cache_expire(${1:minutes})${2}
snippet session_cache_limiter
	session_cache_limiter(${1:cache_limiter})${2}
snippet session_decode
	session_decode(${1:string})${2}
snippet session_destroy
	session_destroy()
snippet session_encode
	session_encode()
snippet session_get_cookie_params
	session_get_cookie_params()
snippet session_id
	session_id(${1:[new_id]})${2}
snippet session_is_registered
	session_is_registered(${1:var_name})${2}
snippet session_module_name
	session_module_name(${1:new_module})${2}
snippet session_name
	session_name(${1:[new_name]})${2}
snippet session_regenerate_id
	session_regenerate_id(${1:[delete_old_session=false]})${2}
snippet session_register
	session_register(${1:var1...})${2}
snippet session_save_path
	session_save_path(${1:[new_path]})${2}
snippet session_set_cookie_params
	session_set_cookie_params(${1:lifetime}${2:, }${3:[path]}${4:, }${5:[domain]}${6:, }${7:[secure=false]}${8:, }${9:[httponly=false]})${10}
snippet session_set_save_handler
	session_set_save_handler(${1:open_callback}${2:, }${3:close_callback}${4:, }${5:read_callback}${6:, }${7:write_callback}${8:, }${9:destroy_callback}${10:, }${11:gc_callback})${12}
snippet session_start
	session_start()
snippet session_unregister
	session_unregister(${1:var_name})${2}
snippet session_unset
	session_unset()
snippet session_write_close
	session_write_close()
snippet set_error_handler
	set_error_handler(${1:callback}${2:, }${3:[error_types=E_ALL|E_STRICT]})${4}
snippet set_exception_handler
	set_exception_handler(${1:callback})${2}
snippet set_time_limit
	set_time_limit(${1:seconds})${2}
snippet setcookie
	setcookie(${1:name}${2:, }${3:[value]}${4:, }${5:[time() + expire]}${6:, }${7:[path]}${8:, }${9:[domain]}${10:, }${11:[secure=false]}${12:, }${13:[httponly=false]})
snippet setrawcookie
	setrawcookie(${1:name}${2:, }${3:[value]}${4:, }${5:[time() + expire]}${6:, }${7:[path]}${8:, }${9:[domain]}${10:, }${11:[secure=false]}${12:, }${13:[httponly=false]})
snippet sfun
	/**
	 * ${3}
	 *
	 * @return ${4:void}
	 */
	public static function ${1:functionName}(${2})
	{
		${5}
	}
snippet sha1
	sha1(${1:string})${2}
snippet sha1_file
	sha1_file(${1:filename})${2}
snippet shell_exec
	shell_exec(${1:command})${2}
snippet shuffle
	shuffle(${1:&array})${2}
snippet simplexml_load_file
	simplexml_load_file(${1:filename})${2}
snippet simplexml_load_string
	simplexml_load_string(${1:string})${2}
snippet sinc
	return $app->tpl->callInclude(${1:djmSmarty::defaultTemplate()}, ${2:$params});
snippet sleep
	sleep(${1:seconds})${2}
snippet smf
	<?php

	/**
	 * ${1}
	 *
	 * @return ${2:string}
	 */
	function smarty_function_`substitute(Filename('', 'NAME'), '^function\.', '', '')`($params, &$smarty)
	{
		global $app;

		${3}

		return $app->tpl->callInclude(djmSmarty::defaultTemplate(), $params);
	}
snippet smb
	<?php

	/**
	 * ${1}
	 *
	 * @return ${2:string}
	 */
	function smarty_block_`substitute(Filename('', 'NAME'), '^block\.', '', '')`($params, $content, &$smarty)
	{
		if ($content === null) {
			return;
		}

		${3}
	}
snippet smm
	<?php

	/**
	 * ${1}
	 *
	 * @return ${2:string}
	 */
	function smarty_modifier_`substitute(Filename('', 'NAME'), '^modifier\.', '', '')`($text)
	{
		${3}
	}
snippet sort
	sort(${1:&array}${2:, }${3:[flags=SORT_REGULAR]})${4}
snippet spl_autoload_register
	spl_autoload_register(${1:callback})${2}
snippet spl_object_hash
	spl_object_hash(${1:object})${2}
snippet sprintf
	sprintf(${1:format}, ${2:args...})${3}
snippet str_ireplace
	str_ireplace(${1:search}, ${2:replace}, ${3:subject}${4:, }${5:[&count]})${6}
snippet str_pad
	str_pad(${1:input}, ${2:length}${3:, }${4:[pad_string=' ']}${5:, }${6:[pad_type=STR_PAD_RIGHT]})${7}
snippet str_repeat
	str_repeat(${1:string}, ${2:multiplier})${3}
snippet str_replace
	str_replace(${1:search}, ${2:replace}, ${3:subject}${4:, }${5:[&count]})${6}
snippet str_rot13
	str_rot13(${1:string})${2}
snippet str_shuffle
	str_shuffle(${1:string})${2}
snippet	str_split
	str_split(${1:string}${2:, }${3:length})${4}
snippet str_word_count Return number of words
	str_word_count(${1:string})${2}
snippet str_word_count Return array of words
	str_word_count(${1:string}, 1)${2}
snippet str_word_count Return associative array of words (position => word)
	str_word_count(${1:string}, 2)${2}
snippet strcasecmp
	strcasecmp(${1:string1}, ${2:string2})${3}
snippet strchr
	strstr(${1:haystack}, ${2:chars}${3:, }${4:[return_before_needle=false]})${5}
snippet strcmp
	strcmp(${1:string1}, ${2:string2})${3}
snippet strftime
	strftime(${1:format}${2:, }${3:[timestamp=time()]})${4}
snippet strip_tags
	strip_tags(${1:string})${2}
snippet stripcslashes
	stripcslashes(${1:string})${2}
snippet stripos
	stripos(${1:haystack}, ${2:needle}${3:, }${4:[offset=0]})${5}
snippet stripslashes
	stripslashes(${1:string})${2}
snippet stristr
	stristr(${1:haystack}, ${2:needle}${3:, }${4:[return_before_needle=false]})${5}
snippet strlen
	strlen(${1:string})${2}
snippet strnatcasecmp
	strnatcasecmp(${1:string1}, ${2:string2})${3}
snippet strnatcmp
	strnatcmp(${1:string1}, ${2:string2})${3}
snippet strncasecmp
	strncasecmp(${1:string1}, ${2:string2}, ${3:length})${4}
snippet strncmp
	strncmp(${1:string1}, ${2:string2}, ${3:length})${4}
snippet strpbrk
	strpbrk(${1:haystack}, ${2:chars})${3}
snippet strpos
	strpos(${1:haystack}, ${2:needle}${3:, }${4:[offset=0]})${5}
snippet strptime
	strptime(${1:date}, ${2:format})${3}
snippet strrchr
	strrchr(${1:haystack}, ${2:needle})${3}
snippet strrev
	strrev(${1:string})${2}
snippet strripos
	strripos(${1:haystack}, ${2:needle}${3:, }${4:[offset=0]})${5}
snippet strrpos
	strrpos(${1:haystack}, ${2:needle}${3:, }${4:[offset=0]})${5}
snippet strstr
	strstr(${1:haystack}, ${2:chars}${3:, }${4:[return_before_needle=false]})${5}
snippet strtolower
	strtolower(${1:string})${2}
snippet strtotime
	strtotime(${1:string}${2:, }${3:[now]})${4}
snippet strtoupper
	strtoupper(${1:string})${2}
snippet strtr
	strtr(${1:subject}, ${2:from_str}, ${3:to_str})${4}
snippet substr
	substr(${1:string}, ${2:start}${3:, }${4:[length]})${5}
snippet substr_count
	substr_count(${1:haystack}, ${2:needle}${3:, }${4:[offset]}${5:, }${6:[length]})${7}
snippet substr_replace
	substr_replace(${1:string}, ${2:replacement}, ${3:start}${4:, }${5:[length]})${6}
snippet switch
	switch (${1:$varName}) {
		case ${2:value}:
			${3}
			break;
		${5}
		default:
			${4}
			break;
	}
snippet symlink
	symlink(${1:target}, ${2:link})${3}
snippet system
	system(${1:command}${2:, }${3:&return_val})${4}
snippet t
	(${1:condition} ? ${2:true} : ${3:false})
snippet tempnam
	tempnam(${1:dir}, ${2:prefix})${3}
snippet tempfile
	tmpfile()
snippet time
	time()
snippet tmpfile
	tmpfile()
snippet touch
	touch(${1:filename}${2:, }${3:[timestamp=time()]}${4:, }${5:[access_timestamp=timestamp]})${6}
snippet trigger_error
	trigger_error(${1:error_msg}${2:, }${3:[error_type=E_USER_NOTICE]})${4}
snippet trim
	trim(${1:string}${2:, }${3:[char_list]})${4}
snippet uasort
	uasort(${1:&array}, ${2:callback})${3}
snippet ucase
	strtoupper(${1:string})${2}
snippet ucfirst
	ucfirst(${1:string})${2}
snippet ucwords
	ucwords(${1:string})${2}
snippet uksort
	uksort(${1:&array}, ${2:callback})${3}
snippet umask
	umask(${1:0777})${2}
snippet unhtmlentities
	html_entity_decode(${1:string}${2:, }${3:ENT_COMPAT}${4:, }${5:'UTF-8'})${6}
snippet unhtmlspecialchars
	htmlspecialchars_decode(${1:string}${2:, }${3:[quote_style=ENT_COMPAT]})${4}
snippet uniqid
	uniqid(${1:''}${2:, }${3:true})${4}
snippet unlink
	unlink(${1:filename})${2}
snippet unpack
	unpack(${1:format}, ${2:data})${3}
snippet unserialize
	unserialize(${1:string})${2}
snippet unset
	unset(${1:var})${2}
snippet upper
	strtoupper(${1:string})${2}
snippet urldecode
	urldecode(${1:string})${2}
snippet urlencode
	urlencode(${1:string})${2}
snippet user_error
	trigger_error(${1:error_msg}${2:, }${3:[error_type=E_USER_NOTICE]})${4}
snippet usleep
	usleep(${1:microseconds})${2}
snippet usort
	usort(${1:&array}, ${2:callback})${3}
snippet var
	public
		$${1:varName};
snippet var_dump
	var_dump(${1:var})${2}
snippet var_export
	var_export(${1:var}${2:, }${3:[return=false]})${4}
snippet version_compare
	version_compare(${1:version1}, ${2:version2}${3:, }${4:[operator]})${5}
snippet vprintf
	vprintf(${1:format}, ${2:args_array})${3}
snippet vsprintf
	vsprintf(${1:format}, ${2:args_array})${3}
snippet wh
	while (${1:/* condition */}) {
		${2}
	}
snippet while
	while (${1:/* condition */}) {
		${2}
	}
snippet wordwrap
	wordwrap(${1:string}, ${2:width}${3:, }${4:[break_char="\n"]}${5:, }${6:[cut_long_words=false]})${7}
