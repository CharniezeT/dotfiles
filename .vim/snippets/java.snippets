snippet ab
	abstract
snippet action
	public static void ${1:index}(${2:args}) { ${3} }
snippet as
	assert ${1:test} : "${2:Failure message}";${3}
snippet before
	@Before
	static void ${1:intercept}(${2:args}) { ${3} }
snippet br
	break;
snippet ca
	catch(${1:Exception} ${2:e}) ${3}
snippet class basic
	/**
	 * class $2
	 * @author ${4:`g:snips_author`}
	 */
	${1:public} class ${2:`Snippet_JavaClassNameFromFilename()`}${3} {

		/**
		* Constructor for $2
		*/
		public $2(${5}){
			${6}
		}

	}
snippet class basic + constructor
	/**
	 * class $2
	 * @author ${4:`g:snips_author`}
	 */
	${1:public} class ${2:`Snippet_JavaClassNameFromFilename()`}${3} {

		/**
		 * Constructor for $2
		 */
		public $2(${5}){
			${6}
		}

	}
snippet class basic + constructor + main
	/**
	 * class $2
	 * @author ${4:`g:snips_author`}
	 */
	${1:public} class ${2:`Snippet_JavaClassNameFromFilename()`}${3} {

		/**
		  * Constructor for $2
		  */
		public $2(${4}) {
			${5}
		}

		public static void main(String args[]) {
		}

	}
snippet co
	static public final ${1:String} ${2:var} = ${3};${4}
snippet cos
	static public final String ${1:var} = "${2}";${3}
snippet cs
	case ${1}:
		${2}
	${3}
snippet de
	default:
		${1}
snippet debug
	Logger.debug(${1:param});${2}
snippet el
	else
snippet elif
	else if (${1}) ${2}
snippet error
	Logger.error(${1:param});${2}
snippet ext
	extends 
snippet fi
	final
snippet findall
	List<${1:listName}> ${2:items} = ${1}.findAll();${3}
snippet findbyid
	${1:var} ${2:item} = ${1}.findById(${3});${4}
snippet for
	for (${1}; ${2}; ${3}) ${4}
snippet fore
	for (${1} : ${2}) ${3}
snippet gs
	public ${2:variable_type} get${1:VariableName}() {
		return ${3:$1};
	}

	public void set$1($2 $3) {
		this.$3 = $3;
	}
snippet if
	if (${1}) ${2}
snippet im
	import
snippet imp
	implements
snippet in
	interface ${1:`Filename("", "untitled")`} ${2:extends Parent}${3}
snippet info
	Logger.info(${1:param});${2}
snippet j.b
	java.beans.
snippet j.i
	java.io.
snippet j.m
	java.math.
snippet j.n
	java.net.
snippet j.u
	java.util
snippet log
	System.${1:out}.println(${2});
snippet m
	/**
	 * ${5}
	 *
	 * @return ${6}
	 */
	${1:void} ${2:method}(${3})${4: throws }${7}
snippet main
	public static void main (String [] args)
	{
		${1:/* code */}
	}
snippet mm
	@ManyToMany
	${1}
snippet mo
	@ManyToOne
	${1}
snippet om
	OneToMany${1:(cascade=CascadeType.ALL)}
	${2}
snippet oo
	@OneToOne
	${1}
snippet po
	protected
snippet pr
	private
snippet pu
	public
snippet re
	return
snippet ren
	render(${1:param});${2}
snippet rena
	renderArgs.put("${1}", ${2});${3}
snippet renb
	renderBinary(${1:param});${2}
snippet renj
	renderJSON(${1:param});${2}
snippet renx
	renderXml(${1:param});${2}
snippet rnf
	notFound(${1:param});${2}
snippet rnfin
	notFoundIfNull(${1:param});${2}
snippet rr
	redirect(${1:param});${2}
snippet rst
	ResultSet ${1:rst}${2: = null}${3};${4}
snippet ru
	unauthorized(${1:param});${2}
snippet st
	static
snippet sw
	switch (${1}) ${2}
snippet sy
	synchronized
snippet t
	public void test${1:Name}() throws Exception ${2}
snippet tc
	public class ${1:`Filename()`} extends ${2:TestCase}
snippet th
	throw 
snippet try
	try {
		${3}
	} catch(${1:Exception} ${2:e}) {
	}
snippet tryf
	try {
		${3}
	} catch(${1:Exception} ${2:e}) {
	} finally {
	}
snippet unless
	(unless=${1:param});${2}
snippet v
	${1:String} ${2:var}${3: = null}${4};${5}
snippet warn
	Logger.warn(${1:param});${2}
snippet wh
	while (${1}) ${2}
