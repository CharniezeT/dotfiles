snippet ==
	#================================================================================
	# ${1}
	#================================================================================
snippet --
	#--------------------------------------------------------------------------------
	# ${1}
	#--------------------------------------------------------------------------------
snippet #!
	#!/usr/bin/env ruby

snippet :
	:${1:key} => ${2:"value"}${3}
snippet =b
	=begin rdoc
		${1}
	=end
snippet aa
	attr_accessible :${1:attr_names}
snippet aft
	after(:${1:each}) do
		${2}
	end
snippet all
	all? { |${1:e}| ${2} }
snippet am
	alias_method :${1:new_name}, :${2:old_name}
snippet any
	any? { |${1:e}| ${2} }
snippet annot
	any_number_of_times
snippet anr
	and_return(${1:value})
snippet anra
	and_raise(${1:exception})
snippet anrb
	and_return { ${1} }
snippet ant
	and_throw(${1:sym})
snippet any
	and_yield(${1:values})
snippet app
	if __FILE__ == $PROGRAM_NAME
		${1}
	end
snippet array
	Array.new(${1:10}) { |${2:i}| ${3} }
snippet art
	assert_redirected_to ${1::action => "${2:index}"}
snippet artnp
	assert_redirected_to ${1:parent}_${2:child}_path(${3:@$1}, ${4:@$2})
snippet artnpp
	assert_redirected_to ${1:parent}_${2:child}_path(${3:@$1})
snippet artp
	assert_redirected_to ${1:model}_path(${2:@$1})
snippet artpp
	assert_redirected_to ${1:model}s_path
snippet as
	assert ${1:test}, "${2:Failure message.}"${3}
snippet asb
	assert_boolean ${1:actual}
snippet asc
	assert_compare ${1:expected}, ${2:operator}, ${3:actual}
snippet ascd
	assert_const_defined ${1:object}, ${2:constant_name}
snippet asam
	assert_alias_method ${1:object}, ${2:alias_name}, ${3:original_name}
snippet asd
	assert_difference "${1:Model}.${2:count}", $1 do
		${3}
	end
snippet ase
	assert_equal ${1:expected}, ${2:actual}${3}
snippet asem
	assert_empty ${1:object}
snippet asf
	assert_false ${1:actual}
snippet asfa
	assert_fail_assertion { ${1:block} }
snippet asi
	assert_include ${1:collection}, ${2:object}
snippet asid
	assert_in_delta ${1:expected_float}, ${2:actual_float}, ${3:2**-20}${4}
snippet asie
	assert_in_epsilon ${1:expected_float}, ${2:actual_float}
snippet asio
	assert_instance_of ${1:ExpectedClass}, ${2:actual_instance}${3}
snippet asko
	assert_kind_of ${1:ExpectedKind}, ${2:actual_instance}${3}
snippet asm
	assert_match /${1:expected_pattern}/, ${2:actual_string}${3}
snippet asn
	assert_nil ${1:instance}${2}
snippet asncd
	assert_not_const_defined ${1:object}, ${2:constant_name}
snippet asnd
	assert_no_difference "${1:Model}.${2:count}" do
		${3}
	end
snippet asne
	assert_not_equal ${1:unexpected}, ${2:actual}${3}
snippet asnem
	assert_not_empty ${1:object}
snippet asni
	assert_not_include ${1:collection}, ${2:object}
snippet asnid
	assert_not_in_delta ${1:expected_float}, ${2:actual_float}
snippet asnie
	assert_not_in_epsilon ${1:expected_float}, ${2:actual_float}
snippet asnm
	assert_no_match /${1:unexpected_pattern}/, ${2:actual_string}${3}
snippet asnn
	assert_not_nil ${1:instance}${2}
snippet asnp
	assert_not_predicate ${1:object}, ${2:predicate}
snippet asnr
	assert_nothing_raised ${1:Exception} { ${2} }
snippet asnrd
	assert_nothing_raised ${1:Exception} do
		${2}
	end
snippet asnse
	assert_not_send ${1:send_array}
snippet asnrt
	assert_not_respond_to ${1:object}, ${2:method}
snippet asns
	assert_not_same ${1:unexpected}, ${2:actual}${3}
snippet asnt
	assert_nothing_thrown { ${1} }
snippet asntd
	assert_nothing_thrown do
		${1}
	end
snippet aso
	assert_operator ${1:left}, :${2:operator}, ${3:right}${4}
snippet asp
	assert_predicate ${1:object}, ${2:predicate}
snippet aspe
	assert_path_exist ${1:path}
snippet aspne
	assert_path_not_exist ${1:path}
snippet asr
	assert_raise ${1:Exception} { ${2} }
snippet asrd
	assert_raise ${1:Exception} do
		${2}
	end
snippet asre
	assert_response :${1:success}, @response.body${2}
snippet asrj
	assert_rjs :${1:replace}, "${2:dom id}"
snippet asrko
	assert_raise_kind_of(${1:kinds...}) { ${2} }
snippet asrkod
	assert_raise_kind_of(${1:kinds...}) do
		${2}
	end
snippet asrm
	assert_raise_message ${1:expected_message}
snippet asrt
	assert_respond_to ${1:object}, :${2:method}${3}
snippet ass
	assert_same ${1:expected}, ${2:actual}${3}
snippet asse
	assert_select '${1:path}', :${2:text} => '${3:inner_html' ${4:do}
snippet assn
	assert_send [${1:object}, :${2:message}, ${3:args}]${4}
snippet ast
	assert_throws :${1:expected} { ${2} }
snippet astd
	assert_throws :${1:expected} do
		${2}
	end
snippet astr
	assert_true ${1:actual}
snippet atl
	at_least(${1:n}).times
snippet atm
	at_most(${1:n}).times
snippet b
	{|${1:var}| ${2}}
snippet bef
	before(:${1:each}) do
		${2}
	end
snippet beg
	begin
		${3}
	rescue ${1:Exception} => ${2:e}
		
	end
snippet begin
	begin
		${3}
	rescue ${1:Exception} => ${2:e}
		puts e.message
		puts e.backtrace.inspect
	else
		
	ensure
		
	end
snippet bf
	before_filter :${1:method}
snippet bm
	TESTS = ${1:10_000}
	Benchmark.bmbm do |results|
		${2}
	end
snippet bt
	belongs_to :${1:association}
snippet case
	case ${1:object}
	when ${2:condition}
		${3}
	end
snippet cl
	classify { |${1:e}| ${2} }
snippet class
	class ${1:`substitute(Filename(), '^.', '\u&', '')`}
		${2}
	end
snippet classe
	class ${1:`substitute(Filename(), '^.', '\u&', '')`} < ${2:ParentClass}
		def initialize(${3:args})
			${4}
		end


	end
snippet clafn
	split("::").inject(Object) { |par, const| par.const_get(const) }
snippet classe
	class ${1:ErrorClassName} < ${2:StandardError}; end${3}
snippet col
	collect { |${1:e}| ${2} }
snippet cold
	collect do |${1:e}|
		${2}
	end
snippet comp
	include Comparable

	def <=>(other)
		${1}
	end
snippet conn
	controller_name :${1:controller}
snippet cont
	context "${1:message}" do
		${2}
	end
snippet crw
	cattr_accessor :${1:attr_names}
snippet debug
	require 'ruby-debug'; debugger; true;
snippet deec
	Marshal.load(Marshal.dump(${1:obj_to_copy}))${2}
snippet def
	def ${1:method_name}
		${2}
	end
snippet defcreate
	def create
		@${1:model_class_name} = ${2:ModelClassName}.new(params[:$1])
	
		respond_to do |wants|
			if @$1.save
				flash[:notice] = '$2 was successfully created.'
				wants.html { redirect_to(@$1) }
				wants.xml  { render :xml => @$1, :status => :created, :location => @$1 }
			else
				wants.html { render :action => "new" }
				wants.xml  { render :xml => @$1.errors, :status => :unprocessable_entity }
			end
		end
	end${3}
snippet defd
	def_delegator :${1:@del_obj}, :${2:del_meth}, :${3:new_name}
snippet defdestroy
	def destroy
		@${1:model_class_name} = ${2:ModelClassName}.find(params[:id])
		@$1.destroy
	
		respond_to do |wants|
			wants.html { redirect_to($1s_url) }
			wants.xml  { head :ok }
		end
	end${3}
snippet defedit
	def edit
		@${1:model_class_name} = ${2:ModelClassName}.find(params[:id])
	end
snippet defds
	def_delegators :${1:@del_obj}, :${2:del_methods}
snippet defi
	def initialize${1}
		${2}
	end
snippet defindex
	def index
		@${1:model_class_name} = ${2:ModelClassName}.all
	
		respond_to do |wants|
			wants.html # index.html.erb
			wants.xml  { render :xml => @$1s }
		end
	end${3}
snippet defmm
	def method_missing(meth, *args, &blk)
		${1}
	end
snippet defnew
	def new
		@${1:model_class_name} = ${2:ModelClassName}.new
	
		respond_to do |wants|
			wants.html # new.html.erb
			wants.xml  { render :xml => @$1 }
		end
	end${3}
snippet defs
	def self.${1:class_method_name}
		${2}
	end
snippet defshow
	def show
		@${1:model_class_name} = ${2:ModelClassName}.find(params[:id])
	
		respond_to do |wants|
			wants.html # show.html.erb
			wants.xml  { render :xml => @$1 }
		end
	end${3}
snippet deft
	def test_${1:case_name}
		${2}
	end
snippet defupdate
	def update
		@${1:model_class_name} = ${2:ModelClassName}.find(params[:id])
	
		respond_to do |wants|
			if @$1.update_attributes(params[:$1])
				flash[:notice] = '$2 was successfully updated.'
				wants.html { redirect_to(@$1) }
				wants.xml  { head :ok }
			else
				wants.html { render :action => "edit" }
				wants.xml  { render :xml => @$1.errors, :status => :unprocessable_entity }
			end
		end
	end${3}
snippet deft
	def test_${1:case_name}
		${2}
	end
snippet deli
	delete_if { |${1:e}| ${2} }
snippet des
	describe ${1:`Snippet_RubyClassNameFromFilename()`} do
		${2}
	end
snippet desc
	describe ${1:class_name} do
		${2}
	end
snippet desrc
	describe ${1:controller}, "${2:GET|POST|PUT|DELETE} ${3:/some/path}${4}" do
		${5}
	end
snippet dest
	describe ${1:Type} do
		${2}
	end
snippet dests
	describe ${1:Type}, "${2:description}" do
		${3}
	end
snippet det
	detect { |${1:e}| ${2} }
snippet detd
	detect do |${1:e}|
		${2}
	end
snippet dir
	Dir[${1:"glob/**/*.rb"}]${2}
snippet dirname
	Filename.dirname(${1:__FILE__})
snippet do
	do
		${1}
	end
snippet dop
	do |${1:param}|
		${2}
	end
snippet dov
	do |${1:variable}|
		${2}
	end
snippet dow
	downto(${1:0}) { |${2:n}| ${3} }
snippet ea
	each { |${1:e}| ${2} }
snippet eab
	each_byte { |${1:byte}| ${2} }
snippet eac
	each_char { |${1:chr}| ${2} }
snippet eaco
	each_cons(${1:2}) { |${2:group}| ${3} }
snippet ead
	each do |${1:e}|
		${2}
	end
snippet eai
	each_index { |${1:i}| ${2} }
snippet eaid
	each_index do |${1:i}|
		${2}
	end
snippet eak
	each_key { |${1:key}| ${2} }
snippet eakd
	each_key do |${1:key}|
		${2}
	end
snippet eal
	each_line { |${1:line}| ${2} }
snippet eald
	each_line do |${1:line}|
		${2}
	end
snippet eap
	each_pair { |${1:name}, ${2:val}| ${3} }
snippet eapd
	each_pair do |${1:name}, ${2:val}|
		${3}
	end
snippet eas-
	each_slice(${1:2}) { |${2:group}| ${3} }
snippet easd-
	each_slice(${1:2}) do |${2:group}|
		${3}
	end
snippet eav
	each_value { |${1:val}| ${2} }
snippet eavd
	each_value do |${1:val}|
		${2}
	end
snippet eawi
	each_with_index { |${1:e}, ${2:i}| ${3} }
snippet eawid
	each_with_index do |${1:e},${2:i}|
		${3}
	end
snippet elsif
	elsif ${1:condition}
		${2}
snippet end
	__END__
snippet enum
	include Enumerable

	def each(&block)
		${1}
	end
snippet ex
	exactly(${1:n}).times
snippet fac
	Factory(:${1}, ${2})${3}
snippet facb
	Factory.build(:${1}, ${2})${3}
snippet facd
	Factory.define(:${1:model}) do |${2:f}|
		${3}
	end
snippet facn
	Factory.next(:${1:sequence-name})${2}
snippet facs
	Factory.sequence :${1:sequence-name} do |${2:m}|
		${3}
	end
snippet fet
	fetch(${1:name}) { |${2:key}| ${3} }
snippet fin
	find { |${1:e}| ${2} }
snippet fina
	find_all { |${1:e}| ${2} }
snippet finad
	find_all do |${1:e}|
		${2}
	end
snippet find
	find do |${1:e}|
		${2}
	end
snippet fil
	fill(${1:range}) { |${2:i}| ${3} }
snippet file
	File.read(${1:"path/to/file"})${2}
snippet fileach
	File.foreach(${1:"path/to/file"}) { |${2:line}| ${3} }
snippet fl
	flunk "${1:Failure message.}"${2}
snippet flao
	inject(Array.new) { |${1:arr}, ${2:a}| $1.push(*$2)}${3}
snippet flash
	flash[:${1:notice}] = "${2}"
snippet fopen
	File.open(${1:path}, "${2:rwab}") { |${3:file}| ${4} }
snippet for
	for ${1:e} in ${2:c}
		${3}
	end
snippet forw-
	extend Forwardable
snippet fread
	File.read(${1:"path/to/file"})${2}
snippet glob
	Dir.glob(${1:"dir/glob/*"}) { |${2:file}| ${3} }
snippet globd
	Dir.glob(${1:"dir/glob/*"}) do |${2:file}|
		${3}
	end
snippet gre
	grep(${1:/pattern/}) { |${2:match}| ${3} }
snippet habtm
	has_and_belongs_to_many :${1:object}, :join_table => "${2:table_name}", :foreign_key => "${3}_id"${4}
snippet hash
	Hash.new { |${1:hash}, ${2:key}| $1[$2] = ${3} }
snippet help
	helper_method :${1:method_name}
snippet hm
	has_many :${1:object}
snippet hmd
	has_many :${1:other}s, :class_name => "${2:$1}", :foreign_key => "${3:$1}_id", :dependent => :destroy${4}
snippet hmt
	has_many :${1:object}, :through => :${2:object}
snippet ho
	has_one :${1:object}
snippet hsp
	has_secure_password
snippet httpget
	require 'net/http'
	res = Net::HTTP.get URI.parse('${1:url}')
snippet httppost
	require 'net/http'
	res = Net::HTTP.post_form URI.parse('${1:url}')${2:, params}
snippet i18
	I18n.t('${1:type.key}')${2}
snippet if
	if ${1:condition}
		${2}
	end
snippet ife
	if ${1:condition}
		${2}
	else
		${3}
	end
snippet inj
	inject(${1:init}) { |${2:mem}, ${3:var}| ${4} }
snippet injd
	inject(${1:init}) do |${2:mem}, ${3:var}|
		${4}
	end
snippet ip
	request.env['REMOTE_ADDR']
snippet isbl
	it_should_behave_like '${1:do something}'
snippet ist
	<%= image_submit_tag("${1:agree.png}", :id => "${2:id}"${3} %>
snippet it
	it "${1:spec_name}" do
		${2}
	end
snippet its
	it "should ${1:do something}" do
		${2}
	end
snippet lam
	lambda { |${1:args}| ${2} }
snippet log
	RAILS_DEFAULT_LOGGER.${1:debug} ${2}
snippet logd
	logger.debug { "${1:message}" }${2}
snippet loge
	logger.error { "${1:message}" }${2}
snippet logf
	logger.fatal { "${1:message}" }${2}
snippet logi
	logger.info { "${1:message}" }${2}
snippet logw
	logger.warn { "${1:message}" }${2}
snippet loo
	loop { ${1} }
snippet loop
	loop { ${1} }
snippet mac
	add_column :${1:table_name}, :${2:column_name}, :${3:data_type}
snippet map
	map { |${1:e}| ${2} }
snippet mapc
	${1:map}.${2:connect} '${3:controller/:action/:id}'
snippet mapca
	${1:map}.catch_all "*${2:anything}", :controller => "${3:default}", :action => "${4:error}"${5}
snippet mapd
	map do |${1:e}|
		${2}
	end
snippet mapr
	${1:map}.resource :${2:resource}
snippet maprs
	${1:map}.resources :${2:resource}
snippet mapwi-
	enum_with_index.map { |${1:e}, ${2:i}| ${3} }
snippet mapwo
	${1:map}.with_options :${2:controller} => '${3:thing}' do |$3|
		${4}
	end
snippet mat
	class ${1:ReverseTo}
		def initialize(${2:param})
			@$2 = $2
		end

		def matches?(actual)
			@actual = actual
			# Satisfy expectation here. Return false or raise an error if it's not met.
			${3:@actual.reverse.should == @$2}
			true
		end

		def failure_message
			"expected #{@actual.inspect} to ${4} #{@$2.inspect}, but it didn't"
		end

		def negative_failure_message
			"expected #{@actual.inspect} not to ${5} #{@$2.inspect}, but it did"
		end
	end

	def ${6:reverse_to}(${7:expected})
		${8}.new($7)
	end
snippet max
	max { |a, b| ${1} }
snippet mbs
	before_save :${1:method}
snippet mcc
	change_column :${1:table}, :${2:column}, :${3:type}
snippet mccc
	t.column :${1:title}, :${2:string}
snippet mcht
	change_table :${1:table_name} do |t|
		${2}
	end
snippet mcol
	remove_column :${1:table}, :${2:column}
snippet mct
	create_table :${1:table_name} do |t|
		t.column :${2:name}, :${3:type}
	end
snippet mdump
	File.open(${1:"path/to/file.dump"}, "wb") { |${2:file}| Marshal.dump(${3:obj}, $2) }${4}
snippet migration
	class ${1:`Snippet_MigrationNameFromFilename()`} < ActiveRecord::Migration
		def self.up
			${2}
		end
	
		def self.down
		end
	end
snippet min
	min { |a, b| ${1} }
snippet mload
	File.open(${1:"path/to/file.dump"}, "rb") { |${2:file}| Marshal.load($2) }${3}
snippet mm
	mock_model(${1:model})${2}
snippet mock
	mock("${1:mock_name}"${2:, :null_object => true})${3}
snippet mocw
	Spec::Runner.configure do |config|
		config.mock_with :${1:mocha|flexmock|rr}
	end
snippet mod
	module ${1:`substitute(Filename(), '^.', '\u&', '')`}
		${2}
	end
snippet module
	module ${1:`substitute(Filename(), '^.', '\u&', '')`}
		${2}
	end
snippet mp
	map(&:${1:id})
snippet mrc
	remove_column :${1:column_name}
snippet mrmc
	remove_column :${1:table_name}, :${2:column_name}
snippet mrnc
	rename_column :${1:table_name}, :${2:old_column_name}, :${3:new_column_name}
snippet mrw
	mattr_accessor :${1:attr_names}
snippet nam
	namespace :${1:`Filename()`} do
		${2}
	end
snippet oa
	order("${1:field}")
snippet od
	order("${1:field} DESC")
snippet on
	once
snippet ope
	open(${1:"path/or/url/or/pipe"}, "${2:w}") { |${3:io}| ${4} }
snippet opt
	opts.on( "-${1:o}", "--${2:long-option-name}", ${3:String},
	         "${4:Option description.}") do |${5:opt}|
		${6}
	end
snippet optp
	require "optparse"

	options = {${1:default => "args"}}

	ARGV.options do |opts|
		opts.banner = "Usage: #{File.basename($PROGRAM_NAME)}"

		${2}
	end
snippet pa
	params[:${1:id}]${2}
snippet par
	partition { |${1:e}| ${2} }
snippet pard
	partition do |${1:e}|
		${2}
	end
snippet patfh
	File.join(File.dirname(__FILE__), *%2[${1:rel path here}])${2}
snippet Pn-
	PStore.new(${1:"file_name.pstore"})${2}
snippet pry
	require 'pry'; binding.pry
snippet r
	attr_reader :${1:attr_names}
snippet ra
	render :action => "${1:action}"
snippet ral
	render :action => "${1:action}", :layout => "${2:layoutname}"
snippet ran
	sort_by { rand }
snippet rb
	#!/usr/bin/env ruby -wKU
snippet resh
	require File.dirname(__FILE__) + '/../spec_helper'
snippet rf
	render :file => "${1:filepath}"
snippet rfu
	render :file => "${1:filepath}", :use_full_path => ${2:false}
snippet rej
	reject { |${1:e}| ${2} }
snippet rejd
	reject do |${1:e}|
		${2}
	end
snippet rep
	results.report("${1:name}:") { TESTS.times { ${2} }}
snippet req
	require "${1}"${2}
snippet rest
	respond_to do |format|
		format.${1:html} { ${2} }
	end
snippet reve
	reverse_each { |${1:e}| ${2} }
snippet reved
	reverse_each do |${1:e}|
		${2}
	end
snippet ri
	render :inline => "${1:<%= 'hello' %>}"
snippet ril
	render :inline => "${1:<%= 'hello' %>}", :locals => { ${2::name} => "${3:value}"${4} }
snippet rit
	render :inline => "${1:<%= 'hello' %>}", :type => ${2::rxml}
snippet rjson
	render :json => ${1:text to render}
snippet rl
	render :layout => "${1:layoutname}"
snippet rn
	render :nothing => ${1:true}
snippet rns
	render :nothing => ${1:true}, :status => ${2:401}
snippet rp
	render :partial => "${1:item}"
snippet rpc
	render :partial => "${1:item}", :collection => ${2:@$1s}
snippet rpl
	render :partial => "${1:item}", :locals => { :${2:$1} => ${3:@$1}
snippet rpo
	render :partial => "${1:item}", :object => ${2:@$1}
snippet rps
	render :partial => "${1:item}", :status => ${2:500}
snippet rt
	render :text => "${1:text to render}"
snippet rtl
	render :text => "${1:text to render}", :layout => "${2:layoutname}"
snippet rtlt
	render :text => "${1:text to render}", :layout => ${2:true}
snippet rts
	render :text => "${1:text to render}", :status => ${2:401}
snippet ru
	render :update do |${1:page}|
		$1.${2}
	end
snippet rw
	attr_accessor :${1:attr_names}
snippet rxml
	render :xml => ${1:text to render}
snippet samao
	should_allow_mass_assignment_of :${1:field}
snippet savf
	should_allow_values_for :${1:field}, "${2:value}"
snippet sbt
	should_belong_to :${1:association}
snippet sc
	scope :${1:name}, :where(:@${2:field} => ${3:value})
snippet sca
	scan(${1:/pattern/}) { |${2:match}| ${3} }
snippet scad
	scan(${1:/pattern/}) do |${2:match}|
		${3}
	end
snippet sef
	shared_examples_for "${1:do something}" do
		${2}
	end
snippet sel
	select { |${1:e}| ${2} }
snippet selal
	should_ensure_length_at_least :${1:field}, ${2:min_length}
snippet seld
	select do |${1:e}|
		${2}
	end
snippet seli
	should_ensure_length_is :${1:field}, ${2:length}
snippet selir
	should_ensure_length_in_range :${1:field}, ${2:start}..${3:end}
snippet setup
	setup do
		${1}
	end
snippet sevir
	should_ensure_value_in_range :${1:field}, ${2:start}..${3:end}
snippet sh
	${1:target}.should == ${2:value}
snippet sha1
	Digest::SHA1.hexdigest(${1:string})
snippet shabtm
	should_have_and_belong_to_many :${1:association}
snippet shb
	${1:target}.should be(${2:result})${3}
snippet shbc
	${1:target}.should be_close(${2:result}, ${3:tolerance})${4}
snippet shbio
	${1:target}.should be_instance_of(${2:class})${3}
snippet shbko
	${1:target}.should be_a_kind_of(${2:class})${3}
snippet shbr
	response.should be_redirect
snippet shbs
	response.should be_success
snippet shc
	lambda do
		${1}
	end.should change(${2:target}, :${3:method}).from(${4:old_value}).to(${5:new_value}).by(${6:change})
snippet shcm
	should_have_class_methods :${1:method}
snippet shdc
	should_have_db_columns :${1:field}
snippet shdm
	${1:target}.should match(/${2:regexp}/)${3}
snippet she
	${1:target}.should eql(${2:value})${3}
snippet sheq
	${1:target}.should equal(${2:value})${3}
snippet shh
	${1:target}.should have(${2:num}).${3:things}
snippet shhal
	${1:target}.should have_at_least(${2:num}).${3:things}
snippet shham
	${1:target}.should have_at_most(${2:num}).${3:things}
snippet shhr
	${1:target}.should have(${2:n}).records${3}
snippet shi
	should_have_indices :${1:field}
snippet shim
	should_have_instance_methods :${1:method}
snippet shm
	should_have_many :${1:association}
snippet shn
	${1:target}.should_not == ${2:value}
snippet shnb
	${1:target}.should_not be(${2:result})${3}
snippet shnbc
	${1:target}.should_not be_close(${2:result}, ${3:tolerance})${4}
snippet shnbio
	${1:target}.should_not be_instance_of(${2:klass})${3}
snippet shnbko
	${1:target}.should_not be_a_kind_of(${2:klass})${3}
snippet shnbr
	response.should_not be_redirect
snippet shnbs
	response.should_not be_success
snippet shnc
	lambda do
		${1}
	end.should_not change(${2:target}, :${3:method})
snippet shne
	${1:target}.should_not eql(${2:value})${3}
snippet shneq
	${1:target}.should_not equal(${2:value})${3}
snippet shnm
	${1:target}.should_not match(/${2:regexp}/)${3}
snippet shnp
	${1:target}.should_not be_${2:predicate}
snippet shnr
	${1:mock}.should_not_receive(:${2:message})${3}
snippet shnre
	${1:target}.should_not raise_error(${2:error})${3}
snippet shnredt
	response.should_not redirect_to(${1:url})${2}
snippet shnrt
	${1:target}.should_not respond_to(:${2:sym})${3}
snippet shns
	${1:target}.should_not satisfy { |${2:obj}| ${3} }${4}
snippet shnt
	lambda { ${1} }.should_not throw_symbol(:${2:symbol})${3}
snippet sho
	should_have_one :${1:association}
snippet snp
	${1:target}.should be_${2:predicate}
snippet snr
	${1:mock}.should_receive(:${2:message})${3}
snippet shre
	${1:target}.should raise_error(${2:error})${3}
snippet shredt
	response.should redirect_to(${1:url})${2}
snippet shroa
	should_have_read_only_attributes :${1:field}
snippet shrt
	${1:target}.should respond_to(:${2:sym})${3}
snippet shs
	${1:target}.should satisfy { |${2:obj}| ${3} }${4}
snippet sht
	${1:target}.should throw_symble(:${2:symbol})${3}
snippet shtem
	response.should render_template(:${1:template})${2}
snippet sinc
	class << self; self end
snippet sl
	scope :${1:name}, lambda do |${2:value}|
		where("${3:field = ?}", ${4:bind var})
	end
snippet snamao
	should_not_allow_mass_assignment_of :${1:field}
snippet snavf
	should_not_allow_values_for :${1:field}, "${2:value}"
snippet sor
	sort { |a, b| ${1} }
snippet sorb
	sort_by { |${1:e}| ${2} }
snippet ste
	step(${1:2}) { |${2:n}| ${3} }
snippet sub
	${1:g}sub(${2:/pattern/}) { |${3:match}| ${4} }
snippet svao
	should_validate_acceptance_of :${1:field}
snippet svno
	should_validate_numericality_of :${1:field}
snippet svpo
	should_validate_presence_of :${1:field}
snippet svuo
	should_validate_uniqueness_of :${1:field}, :scoped_to => ${2:arrayofnames}
snippet sweeper
	class ${1:ModelClassName}Sweeper < ActionController::Caching::Sweeper
		observe $1
	
		def after_save(${2:model_class_name})
			expire_cache($2)
		end
	
		def after_destroy($2)
			expire_cache($2)
		end
	
		def expire_cache($2)
			expire_page
		end
	end
snippet task
	desc "${1:Task description}"
	task :${2:task_name => [:dependent, :tasks]} do
		${3}
	end
snippet tc
	require "test/unit"

	require "${1:library_file_name}"

	class Test${2:$1} < Test::Unit::TestCase
		def test_${3:case_name}
			${4}
		end
	end
snippet tcb
	t.boolean :${1:title}
	${2}
snippet tcbi
	t.binary :${1:title}, :limit => ${2:2}.megabytes
	${3}
snippet tcd
	t.decimal :${1:title}, :precision => ${2:10}, :scale => ${3:2}
	${4}
snippet tcda
	t.date :${1:title}
	${2}
snippet tcdt
	t.datetime :${1:title}
	${2}
snippet tcf
	t.float :${1:title}
	${2}
snippet tch
	t.change :${1:name}, :${2:string}, :${3:limit} => ${4:80}
	${5}
snippet tci
	t.integer :${1:title}
	${2}
snippet tcl
	t.integer :lock_version, :null => false, :default => 0
	${1}
snippet tcr
	t.references :${1:taggable}, :polymorphic => { :default => '${2:Photo}' }
	${3}
snippet tcs
	t.string :${1:title}
	${2}
snippet tct
	t.text :${1:title}
	${2}
snippet tcti
	t.time :${1:title}
	${2}
snippet tcts
	t.timestamp :${1:title}
	${2}
snippet tctss
	t.timestamps
	${1}
snippet test
	test "${1:should }" do
		${2}
	end
snippet tim
	times { |${1:n}| ${2} }
snippet tra
	transaction(${1:true}) { ${2} }
snippet trc
	t.remove :${1:column}
snippet tre
	t.rename :${1:old_column_name}, :${2:new_column_name}
	${3}
snippet tref
	t.references :${1:model}
snippet ts
	require "test/unit"

	require "tc_${1:test_case_file}"
	require "tc_${2:test_case_file}"${3}
snippet tw
	twice
snippet unif
	ARGF.each_line${1} do |${2:line}|
		${3}
	end
snippet unless
	unless ${1:condition}
		${2}
	end
snippet until
	until ${1:condition}
		${2}
	end
snippet upt
	upto(${1:1.0/0.0}) { |${2:n}| ${3} }
snippet usai
	if ARGV.${1}
		abort "Usage: #{$PROGRAM_NAME} ${2:ARGS_GO_HERE}"${3}
	end
snippet usau
	unless ARGV.${1}
		abort "Usage: #{$PROGRAM_NAME} ${2:ARGS_GO_HERE}"${3}
	end
snippet va
	validates_associated :${1:attribute}
snippet vao
	validates_acceptance_of :${1:terms}
snippet vc
	validates_confirmation_of :${1:attribute}
snippet ve
	validates_exclusion_of :${1:attribute}, :in => ${2:%w( mov avi )}
snippet vf
	validates_format_of :${1:attribute}, :with => /${2:regex}/
snippet vi
	validates_inclusion_of :${1:attribute}, :in => %w(${2: mov avi })
snippet vl
	validates_length_of :${1:attribute}, :within => ${2:3}..${3:20}
snippet vn
	validates_numericality_of :${1:attribute}
snippet vpo
	validates_presence_of :${1:attribute}
snippet vu
	validates_uniqueness_of :${1:attribute}
snippet w
	attr_writer :${1:attr_names}
snippet wants
	wants.${1:js|xml|html} { ${2} }
snippet wc
	where(${1:"conditions"}${2:, bind_var})
snippet wh
	where(${1:field} => ${2:value})
snippet when
	when ${1:condition}
		${2}
snippet while
	while ${1:condition}
		${2}
	end
snippet wia
	with(${1:args})${2}
snippet xdelete
	xhr :delete, :${1:destroy}, :id => ${2:1}${3}
snippet xget
	xhr :get, :${1:show}, :id => ${2:1}${3}
snippet xmlr
	REXML::Document.new(File.read(${1:path}))
snippet xpa
	elements.each(${1:"//Xpath"}) do |${2:node}|
		${3}
	end
snippet xpost
	xhr :post, :${1:create}, :${2:object} => { ${3} }
snippet xput
	xhr :put, :${1:update}, :id => ${2:1}, :${3:object} => { ${4} }${5}snippet xml-
	REXML::Document.new(File.read(${1:"path/to/file"}))${2}
snippet y
	:yields: ${1:arguments}
snippet ydump
	File.open(${1:path_to_yml}, "w") { |${2:file}| YAML.dump(${3:obj}, ${4:$2}) }
snippet yload
	File.open(${1:path_to_yml}) { |${2:file}| YAML.load(${3:$2}) }
snippet zip
	zip(${1:enums}) { |${2:row}| ${3} }
snippet zipd
	zip(${1:enums}) do |${2:row}|
		${3}
	end
